
Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006c10  08006c10  00016c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d00  08006d00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d08  08006d08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d08  08006d08  00016d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000070  08006d80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006d80  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf8b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc9  00000000  00000000  0002d02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267b0  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c455  00000000  00000000  00056640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eda8f  00000000  00000000  00062a95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150524  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e68  00000000  00000000  00150574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006bf8 	.word	0x08006bf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006bf8 	.word	0x08006bf8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c60:	f000 b974 	b.w	8000f4c <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468e      	mov	lr, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14d      	bne.n	8000d26 <__udivmoddi4+0xaa>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	d969      	bls.n	8000d64 <__udivmoddi4+0xe8>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b152      	cbz	r2, 8000cac <__udivmoddi4+0x30>
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	f1c2 0120 	rsb	r1, r2, #32
 8000c9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca6:	ea41 0e03 	orr.w	lr, r1, r3
 8000caa:	4094      	lsls	r4, r2
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	0c21      	lsrs	r1, r4, #16
 8000cb2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb6:	fa1f f78c 	uxth.w	r7, ip
 8000cba:	fb08 e316 	mls	r3, r8, r6, lr
 8000cbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc2:	fb06 f107 	mul.w	r1, r6, r7
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x64>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cd2:	f080 811f 	bcs.w	8000f14 <__udivmoddi4+0x298>
 8000cd6:	4299      	cmp	r1, r3
 8000cd8:	f240 811c 	bls.w	8000f14 <__udivmoddi4+0x298>
 8000cdc:	3e02      	subs	r6, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb00 f707 	mul.w	r7, r0, r7
 8000cf4:	42a7      	cmp	r7, r4
 8000cf6:	d90a      	bls.n	8000d0e <__udivmoddi4+0x92>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d00:	f080 810a 	bcs.w	8000f18 <__udivmoddi4+0x29c>
 8000d04:	42a7      	cmp	r7, r4
 8000d06:	f240 8107 	bls.w	8000f18 <__udivmoddi4+0x29c>
 8000d0a:	4464      	add	r4, ip
 8000d0c:	3802      	subs	r0, #2
 8000d0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d12:	1be4      	subs	r4, r4, r7
 8000d14:	2600      	movs	r6, #0
 8000d16:	b11d      	cbz	r5, 8000d20 <__udivmoddi4+0xa4>
 8000d18:	40d4      	lsrs	r4, r2
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0xc2>
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	f000 80ef 	beq.w	8000f0e <__udivmoddi4+0x292>
 8000d30:	2600      	movs	r6, #0
 8000d32:	e9c5 0100 	strd	r0, r1, [r5]
 8000d36:	4630      	mov	r0, r6
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	fab3 f683 	clz	r6, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d14a      	bne.n	8000ddc <__udivmoddi4+0x160>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xd4>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 80f9 	bhi.w	8000f42 <__udivmoddi4+0x2c6>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb61 0303 	sbc.w	r3, r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	469e      	mov	lr, r3
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e0      	beq.n	8000d20 <__udivmoddi4+0xa4>
 8000d5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d62:	e7dd      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000d64:	b902      	cbnz	r2, 8000d68 <__udivmoddi4+0xec>
 8000d66:	deff      	udf	#255	; 0xff
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	f040 8092 	bne.w	8000e96 <__udivmoddi4+0x21a>
 8000d72:	eba1 010c 	sub.w	r1, r1, ip
 8000d76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7a:	fa1f fe8c 	uxth.w	lr, ip
 8000d7e:	2601      	movs	r6, #1
 8000d80:	0c20      	lsrs	r0, r4, #16
 8000d82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d86:	fb07 1113 	mls	r1, r7, r3, r1
 8000d8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8e:	fb0e f003 	mul.w	r0, lr, r3
 8000d92:	4288      	cmp	r0, r1
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x12c>
 8000d96:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x12a>
 8000da0:	4288      	cmp	r0, r1
 8000da2:	f200 80cb 	bhi.w	8000f3c <__udivmoddi4+0x2c0>
 8000da6:	4643      	mov	r3, r8
 8000da8:	1a09      	subs	r1, r1, r0
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db0:	fb07 1110 	mls	r1, r7, r0, r1
 8000db4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db8:	fb0e fe00 	mul.w	lr, lr, r0
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x156>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc8:	d202      	bcs.n	8000dd0 <__udivmoddi4+0x154>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	f200 80bb 	bhi.w	8000f46 <__udivmoddi4+0x2ca>
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	eba4 040e 	sub.w	r4, r4, lr
 8000dd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dda:	e79c      	b.n	8000d16 <__udivmoddi4+0x9a>
 8000ddc:	f1c6 0720 	rsb	r7, r6, #32
 8000de0:	40b3      	lsls	r3, r6
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dea:	fa20 f407 	lsr.w	r4, r0, r7
 8000dee:	fa01 f306 	lsl.w	r3, r1, r6
 8000df2:	431c      	orrs	r4, r3
 8000df4:	40f9      	lsrs	r1, r7
 8000df6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e02:	0c20      	lsrs	r0, r4, #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fb09 1118 	mls	r1, r9, r8, r1
 8000e0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e10:	fb08 f00e 	mul.w	r0, r8, lr
 8000e14:	4288      	cmp	r0, r1
 8000e16:	fa02 f206 	lsl.w	r2, r2, r6
 8000e1a:	d90b      	bls.n	8000e34 <__udivmoddi4+0x1b8>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e24:	f080 8088 	bcs.w	8000f38 <__udivmoddi4+0x2bc>
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	f240 8085 	bls.w	8000f38 <__udivmoddi4+0x2bc>
 8000e2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e48:	458e      	cmp	lr, r1
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x1e2>
 8000e4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e50:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e54:	d26c      	bcs.n	8000f30 <__udivmoddi4+0x2b4>
 8000e56:	458e      	cmp	lr, r1
 8000e58:	d96a      	bls.n	8000f30 <__udivmoddi4+0x2b4>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	4461      	add	r1, ip
 8000e5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e62:	fba0 9402 	umull	r9, r4, r0, r2
 8000e66:	eba1 010e 	sub.w	r1, r1, lr
 8000e6a:	42a1      	cmp	r1, r4
 8000e6c:	46c8      	mov	r8, r9
 8000e6e:	46a6      	mov	lr, r4
 8000e70:	d356      	bcc.n	8000f20 <__udivmoddi4+0x2a4>
 8000e72:	d053      	beq.n	8000f1c <__udivmoddi4+0x2a0>
 8000e74:	b15d      	cbz	r5, 8000e8e <__udivmoddi4+0x212>
 8000e76:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e82:	fa22 f306 	lsr.w	r3, r2, r6
 8000e86:	40f1      	lsrs	r1, r6
 8000e88:	431f      	orrs	r7, r3
 8000e8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8e:	2600      	movs	r6, #0
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	f1c2 0320 	rsb	r3, r2, #32
 8000e9a:	40d8      	lsrs	r0, r3
 8000e9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	4301      	orrs	r1, r0
 8000ea8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb8:	0c0b      	lsrs	r3, r1, #16
 8000eba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ebe:	fb00 f60e 	mul.w	r6, r0, lr
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x260>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed2:	d22f      	bcs.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed4:	429e      	cmp	r6, r3
 8000ed6:	d92d      	bls.n	8000f34 <__udivmoddi4+0x2b8>
 8000ed8:	3802      	subs	r0, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	b289      	uxth	r1, r1
 8000ee0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eec:	fb06 f30e 	mul.w	r3, r6, lr
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x28a>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000efc:	d216      	bcs.n	8000f2c <__udivmoddi4+0x2b0>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d914      	bls.n	8000f2c <__udivmoddi4+0x2b0>
 8000f02:	3e02      	subs	r6, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f0c:	e738      	b.n	8000d80 <__udivmoddi4+0x104>
 8000f0e:	462e      	mov	r6, r5
 8000f10:	4628      	mov	r0, r5
 8000f12:	e705      	b.n	8000d20 <__udivmoddi4+0xa4>
 8000f14:	4606      	mov	r6, r0
 8000f16:	e6e3      	b.n	8000ce0 <__udivmoddi4+0x64>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6f8      	b.n	8000d0e <__udivmoddi4+0x92>
 8000f1c:	454b      	cmp	r3, r9
 8000f1e:	d2a9      	bcs.n	8000e74 <__udivmoddi4+0x1f8>
 8000f20:	ebb9 0802 	subs.w	r8, r9, r2
 8000f24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f28:	3801      	subs	r0, #1
 8000f2a:	e7a3      	b.n	8000e74 <__udivmoddi4+0x1f8>
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	e7ea      	b.n	8000f06 <__udivmoddi4+0x28a>
 8000f30:	4620      	mov	r0, r4
 8000f32:	e794      	b.n	8000e5e <__udivmoddi4+0x1e2>
 8000f34:	4640      	mov	r0, r8
 8000f36:	e7d1      	b.n	8000edc <__udivmoddi4+0x260>
 8000f38:	46d0      	mov	r8, sl
 8000f3a:	e77b      	b.n	8000e34 <__udivmoddi4+0x1b8>
 8000f3c:	3b02      	subs	r3, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	e732      	b.n	8000da8 <__udivmoddi4+0x12c>
 8000f42:	4630      	mov	r0, r6
 8000f44:	e709      	b.n	8000d5a <__udivmoddi4+0xde>
 8000f46:	4464      	add	r4, ip
 8000f48:	3802      	subs	r0, #2
 8000f4a:	e742      	b.n	8000dd2 <__udivmoddi4+0x156>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <_write>:
/* USER CODE BEGIN 0 */

#ifdef __cplusplus //for printf
extern "C" int _write(int32_t file, uint8_t *ptr, int32_t len) {
#else
int _write(int32_t file, uint8_t *ptr, int32_t len) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
#endif
    if( HAL_UART_Transmit(&huart2, ptr, len, 0xFFFF) == HAL_OK ) return len; // printf for Display
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <_write+0x30>)
 8000f68:	f003 fbfe 	bl	8004768 <HAL_UART_Transmit>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <_write+0x26>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	e000      	b.n	8000f78 <_write+0x28>
    else return 0;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000d4 	.word	0x200000d4
 8000f84:	00000000 	.word	0x00000000

08000f88 <Cal_percent>:
		}
	}
	checkData();
}
*/
float Cal_percent(float vol){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	ed87 0a01 	vstr	s0, [r7, #4]
    if(vol>=57.4){
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff faf0 	bl	8000578 <__aeabi_f2d>
 8000f98:	a356      	add	r3, pc, #344	; (adr r3, 80010f4 <Cal_percent+0x16c>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff fdc9 	bl	8000b34 <__aeabi_dcmpge>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d014      	beq.n	8000fd2 <Cal_percent+0x4a>
        return (float)(1.428*vol)+16;
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff fae5 	bl	8000578 <__aeabi_f2d>
 8000fae:	a353      	add	r3, pc, #332	; (adr r3, 80010fc <Cal_percent+0x174>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fb38 	bl	8000628 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f7ff fdf4 	bl	8000bac <__aeabi_d2f>
 8000fc4:	ee07 0a10 	vmov	s14, r0
 8000fc8:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	e06c      	b.n	80010ac <Cal_percent+0x124>
    } else if(vol>=51.9) {
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fad0 	bl	8000578 <__aeabi_f2d>
 8000fd8:	a34a      	add	r3, pc, #296	; (adr r3, 8001104 <Cal_percent+0x17c>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fda9 	bl	8000b34 <__aeabi_dcmpge>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d017      	beq.n	8001018 <Cal_percent+0x90>
        return (float)6.91 * vol - 298.58;
 8000fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80010d0 <Cal_percent+0x148>
 8000ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff fabe 	bl	8000578 <__aeabi_f2d>
 8000ffc:	a32e      	add	r3, pc, #184	; (adr r3, 80010b8 <Cal_percent+0x130>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f7ff f959 	bl	80002b8 <__aeabi_dsub>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	4610      	mov	r0, r2
 800100c:	4619      	mov	r1, r3
 800100e:	f7ff fdcd 	bl	8000bac <__aeabi_d2f>
 8001012:	ee07 0a90 	vmov	s15, r0
 8001016:	e049      	b.n	80010ac <Cal_percent+0x124>
    } else if(vol>=51.24){
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff faad 	bl	8000578 <__aeabi_f2d>
 800101e:	a328      	add	r3, pc, #160	; (adr r3, 80010c0 <Cal_percent+0x138>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff fd86 	bl	8000b34 <__aeabi_dcmpge>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00a      	beq.n	8001044 <Cal_percent+0xbc>
        return (float)500/33*vol-7990/11;
 800102e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001032:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80010d4 <Cal_percent+0x14c>
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800103a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80010d8 <Cal_percent+0x150>
 800103e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001042:	e033      	b.n	80010ac <Cal_percent+0x124>
    } else if(vol>=49){
 8001044:	edd7 7a01 	vldr	s15, [r7, #4]
 8001048:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80010dc <Cal_percent+0x154>
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	db0a      	blt.n	800106c <Cal_percent+0xe4>
        return (float)125/7*vol-865;
 8001056:	edd7 7a01 	vldr	s15, [r7, #4]
 800105a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80010e0 <Cal_percent+0x158>
 800105e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001062:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80010e4 <Cal_percent+0x15c>
 8001066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800106a:	e01f      	b.n	80010ac <Cal_percent+0x124>
    } else if(vol>=46.2){
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fa83 	bl	8000578 <__aeabi_f2d>
 8001072:	a315      	add	r3, pc, #84	; (adr r3, 80010c8 <Cal_percent+0x140>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fd5c 	bl	8000b34 <__aeabi_dcmpge>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00a      	beq.n	8001098 <Cal_percent+0x110>
        return (float)5/14*vol-15/2;
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80010e8 <Cal_percent+0x160>
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001096:	e009      	b.n	80010ac <Cal_percent+0x124>
    } else{
        return (float)45/14*vol-279/2;
 8001098:	edd7 7a01 	vldr	s15, [r7, #4]
 800109c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010ec <Cal_percent+0x164>
 80010a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010f0 <Cal_percent+0x168>
 80010a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    }
}
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	ae147ae1 	.word	0xae147ae1
 80010bc:	4072a947 	.word	0x4072a947
 80010c0:	51eb851f 	.word	0x51eb851f
 80010c4:	40499eb8 	.word	0x40499eb8
 80010c8:	9999999a 	.word	0x9999999a
 80010cc:	40471999 	.word	0x40471999
 80010d0:	40dd1eb8 	.word	0x40dd1eb8
 80010d4:	41726c9b 	.word	0x41726c9b
 80010d8:	44358000 	.word	0x44358000
 80010dc:	42440000 	.word	0x42440000
 80010e0:	418edb6e 	.word	0x418edb6e
 80010e4:	44584000 	.word	0x44584000
 80010e8:	3eb6db6e 	.word	0x3eb6db6e
 80010ec:	404db6db 	.word	0x404db6db
 80010f0:	430b0000 	.word	0x430b0000
 80010f4:	33333333 	.word	0x33333333
 80010f8:	404cb333 	.word	0x404cb333
 80010fc:	872b020c 	.word	0x872b020c
 8001100:	3ff6d916 	.word	0x3ff6d916
 8001104:	33333333 	.word	0x33333333
 8001108:	4049f333 	.word	0x4049f333
 800110c:	00000000 	.word	0x00000000

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001116:	f000 fea8 	bl	8001e6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111a:	f000 f931 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111e:	f000 fa9d 	bl	800165c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001122:	f000 fa45 	bl	80015b0 <MX_USART6_UART_Init>
  MX_DMA_Init();
 8001126:	f000 fa73 	bl	8001610 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800112a:	f000 f9e1 	bl	80014f0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800112e:	f000 fa0f 	bl	8001550 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001132:	f000 f98b 	bl	800144c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart6, rxBuffer, 150); // loger recieve at buffer
 8001136:	2296      	movs	r2, #150	; 0x96
 8001138:	4981      	ldr	r1, [pc, #516]	; (8001340 <main+0x230>)
 800113a:	4882      	ldr	r0, [pc, #520]	; (8001344 <main+0x234>)
 800113c:	f003 fb97 	bl	800486e <HAL_UART_Receive_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_SET); // loger reset relay on
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001146:	4880      	ldr	r0, [pc, #512]	; (8001348 <main+0x238>)
 8001148:	f002 f9d2 	bl	80034f0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 800114c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001150:	f000 fee8 	bl	8001f24 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,GPIO_PIN_RESET); // loger reset relay off
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115a:	487b      	ldr	r0, [pc, #492]	; (8001348 <main+0x238>)
 800115c:	f002 f9c8 	bl	80034f0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8001160:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001164:	f000 fede 	bl	8001f24 <HAL_Delay>

  //HAL_TIM_Base_Start(&htim11); // timer 11 start

  //timer_val = __HAL_TIM_GET_COUNTER(&htim11);// Get current time (microseconds)
  float input = 1023.0;
 8001168:	4b78      	ldr	r3, [pc, #480]	; (800134c <main+0x23c>)
 800116a:	607b      	str	r3, [r7, #4]
	 //if(timer_val>30000){
	//	 count_tim++;
	 //}
	  //if (count_tim>100000)
	  	  		    //  {
	  	  		        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // LD2
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	4878      	ldr	r0, [pc, #480]	; (8001350 <main+0x240>)
 8001170:	f002 f9d7 	bl	8003522 <HAL_GPIO_TogglePin>
	  	  		        HAL_ADC_Start(&hadc1);//AD변환 시작
 8001174:	4877      	ldr	r0, [pc, #476]	; (8001354 <main+0x244>)
 8001176:	f000 ff3d 	bl	8001ff4 <HAL_ADC_Start>
	  	  		    	HAL_ADC_PollForConversion(&hadc1,100); //AD변환 완료될때까지 대기
 800117a:	2164      	movs	r1, #100	; 0x64
 800117c:	4875      	ldr	r0, [pc, #468]	; (8001354 <main+0x244>)
 800117e:	f001 f807 	bl	8002190 <HAL_ADC_PollForConversion>
	  	  		    	input = HAL_ADC_GetValue(&hadc1); //AD변환결과값을 받는다
 8001182:	4874      	ldr	r0, [pc, #464]	; (8001354 <main+0x244>)
 8001184:	f001 f88f 	bl	80022a6 <HAL_ADC_GetValue>
 8001188:	ee07 0a90 	vmov	s15, r0
 800118c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001190:	edc7 7a01 	vstr	s15, [r7, #4]
	  	  		        float voltage = (input/1023)*3.3; // ADC to Voltage
 8001194:	edd7 7a01 	vldr	s15, [r7, #4]
 8001198:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001358 <main+0x248>
 800119c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011a0:	ee16 0a90 	vmov	r0, s13
 80011a4:	f7ff f9e8 	bl	8000578 <__aeabi_f2d>
 80011a8:	a35f      	add	r3, pc, #380	; (adr r3, 8001328 <main+0x218>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	f7ff fa3b 	bl	8000628 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fcf7 	bl	8000bac <__aeabi_d2f>
 80011be:	4603      	mov	r3, r0
 80011c0:	603b      	str	r3, [r7, #0]
	  	  		    	//printf("Input Voltage: %dV\n",voltage);
	  	  		    	vol = voltage/0.881198; // calculate max 3.3 to 3.7
 80011c2:	6838      	ldr	r0, [r7, #0]
 80011c4:	f7ff f9d8 	bl	8000578 <__aeabi_f2d>
 80011c8:	a359      	add	r3, pc, #356	; (adr r3, 8001330 <main+0x220>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fb55 	bl	800087c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fce7 	bl	8000bac <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a5e      	ldr	r2, [pc, #376]	; (800135c <main+0x24c>)
 80011e2:	6013      	str	r3, [r2, #0]
	  	  		    	//printf("Voltage Sensor(before register): %dV\n",vol);
	  	  		    	vol = vol/0.03985; // calculate battery voltage
 80011e4:	4b5d      	ldr	r3, [pc, #372]	; (800135c <main+0x24c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9c5 	bl	8000578 <__aeabi_f2d>
 80011ee:	a352      	add	r3, pc, #328	; (adr r3, 8001338 <main+0x228>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fb42 	bl	800087c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fcd4 	bl	8000bac <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4a55      	ldr	r2, [pc, #340]	; (800135c <main+0x24c>)
 8001208:	6013      	str	r3, [r2, #0]
	  	  		        vol_per = Cal_percent(vol);
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <main+0x24c>)
 800120c:	edd3 7a00 	vldr	s15, [r3]
 8001210:	eeb0 0a67 	vmov.f32	s0, s15
 8001214:	f7ff feb8 	bl	8000f88 <Cal_percent>
 8001218:	eef0 7a40 	vmov.f32	s15, s0
 800121c:	4b50      	ldr	r3, [pc, #320]	; (8001360 <main+0x250>)
 800121e:	edc3 7a00 	vstr	s15, [r3]
	  	  		    	//printf("Battery Voltage: %dV\nBattery Percent: %d%%\n",(int)round(vol),(int)round(vol_per));
	  	  		      if(vol_per<0||vol_per>100){
 8001222:	4b4f      	ldr	r3, [pc, #316]	; (8001360 <main+0x250>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800122c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001230:	d409      	bmi.n	8001246 <main+0x136>
 8001232:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <main+0x250>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001364 <main+0x254>
 800123c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	dd03      	ble.n	800124e <main+0x13e>
	  	  		    	  vol_per = 0;
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <main+0x250>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
	  	  		      }
	  	  		        printf("t4.txt=\"%d\%\"\n", (int)(round(vol_per)));
 800124e:	4b44      	ldr	r3, [pc, #272]	; (8001360 <main+0x250>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f990 	bl	8000578 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	ec43 2b10 	vmov	d0, r2, r3
 8001260:	f005 fc84 	bl	8006b6c <round>
 8001264:	ec53 2b10 	vmov	r2, r3, d0
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fc76 	bl	8000b5c <__aeabi_d2iz>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	483c      	ldr	r0, [pc, #240]	; (8001368 <main+0x258>)
 8001276:	f004 ff85 	bl	8006184 <iprintf>
	  	  		      fflush (stdout);
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <main+0x25c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	4618      	mov	r0, r3
 8001282:	f004 fd67 	bl	8005d54 <fflush>
	  	  		      HAL_UART_Transmit(&huart2,End, sizeof(End),10);
 8001286:	230a      	movs	r3, #10
 8001288:	2203      	movs	r2, #3
 800128a:	4939      	ldr	r1, [pc, #228]	; (8001370 <main+0x260>)
 800128c:	4839      	ldr	r0, [pc, #228]	; (8001374 <main+0x264>)
 800128e:	f003 fa6b 	bl	8004768 <HAL_UART_Transmit>
	  	  		      printf("t5.txt=\"%dV\"\n", (int)(round(vol)));
 8001292:	4b32      	ldr	r3, [pc, #200]	; (800135c <main+0x24c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f96e 	bl	8000578 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	ec43 2b10 	vmov	d0, r2, r3
 80012a4:	f005 fc62 	bl	8006b6c <round>
 80012a8:	ec53 2b10 	vmov	r2, r3, d0
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fc54 	bl	8000b5c <__aeabi_d2iz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	482f      	ldr	r0, [pc, #188]	; (8001378 <main+0x268>)
 80012ba:	f004 ff63 	bl	8006184 <iprintf>
	  	  		  	  fflush (stdout);
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <main+0x25c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fd45 	bl	8005d54 <fflush>
	  	  		  	  HAL_UART_Transmit(&huart2,End, sizeof(End),10);
 80012ca:	230a      	movs	r3, #10
 80012cc:	2203      	movs	r2, #3
 80012ce:	4928      	ldr	r1, [pc, #160]	; (8001370 <main+0x260>)
 80012d0:	4828      	ldr	r0, [pc, #160]	; (8001374 <main+0x264>)
 80012d2:	f003 fa49 	bl	8004768 <HAL_UART_Transmit>
	  	  		  printf("Battery.val=\"%dV\"\n", (int)(round(vol_per)));
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <main+0x250>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f94c 	bl	8000578 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	ec43 2b10 	vmov	d0, r2, r3
 80012e8:	f005 fc40 	bl	8006b6c <round>
 80012ec:	ec53 2b10 	vmov	r2, r3, d0
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fc32 	bl	8000b5c <__aeabi_d2iz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4619      	mov	r1, r3
 80012fc:	481f      	ldr	r0, [pc, #124]	; (800137c <main+0x26c>)
 80012fe:	f004 ff41 	bl	8006184 <iprintf>
	  	  		  	  	  		  	  fflush (stdout);
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <main+0x25c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f004 fd23 	bl	8005d54 <fflush>
	  	  		  	  	  		  	  HAL_UART_Transmit(&huart2,End, sizeof(End),10);
 800130e:	230a      	movs	r3, #10
 8001310:	2203      	movs	r2, #3
 8001312:	4917      	ldr	r1, [pc, #92]	; (8001370 <main+0x260>)
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <main+0x264>)
 8001316:	f003 fa27 	bl	8004768 <HAL_UART_Transmit>
	  	  		  	  	  	vol_per_str[4] = '\0';

	  	  		  	    	HAL_UART_Transmit(&huart6,vol_str, 4,10);
	  	  		  	  HAL_UART_Transmit(&huart6,vol_per_str, 4,10);
*/
	  	  		  	 HAL_Delay(1000);
 800131a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800131e:	f000 fe01 	bl	8001f24 <HAL_Delay>
  {
 8001322:	e723      	b.n	800116c <main+0x5c>
 8001324:	f3af 8000 	nop.w
 8001328:	66666666 	.word	0x66666666
 800132c:	400a6666 	.word	0x400a6666
 8001330:	25e99e95 	.word	0x25e99e95
 8001334:	3fec32c6 	.word	0x3fec32c6
 8001338:	1d7dbf48 	.word	0x1d7dbf48
 800133c:	3fa46738 	.word	0x3fa46738
 8001340:	2000032c 	.word	0x2000032c
 8001344:	200001e4 	.word	0x200001e4
 8001348:	40020800 	.word	0x40020800
 800134c:	447fc000 	.word	0x447fc000
 8001350:	40020400 	.word	0x40020400
 8001354:	2000008c 	.word	0x2000008c
 8001358:	447fc000 	.word	0x447fc000
 800135c:	200003c4 	.word	0x200003c4
 8001360:	200003c8 	.word	0x200003c8
 8001364:	42c80000 	.word	0x42c80000
 8001368:	08006c10 	.word	0x08006c10
 800136c:	2000000c 	.word	0x2000000c
 8001370:	08006c44 	.word	0x08006c44
 8001374:	200000d4 	.word	0x200000d4
 8001378:	08006c20 	.word	0x08006c20
 800137c:	08006c30 	.word	0x08006c30

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0320 	add.w	r3, r7, #32
 800138a:	2230      	movs	r2, #48	; 0x30
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fe0f 	bl	8005fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a4:	4b27      	ldr	r3, [pc, #156]	; (8001444 <SystemClock_Config+0xc4>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	4a26      	ldr	r2, [pc, #152]	; (8001444 <SystemClock_Config+0xc4>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	; 0x40
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <SystemClock_Config+0xc4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <SystemClock_Config+0xc8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <SystemClock_Config+0xc8>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <SystemClock_Config+0xc8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e0:	2310      	movs	r3, #16
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013ec:	2308      	movs	r3, #8
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013f0:	2348      	movs	r3, #72	; 0x48
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f002 f8a9 	bl	8003558 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800140c:	f000 fa3e 	bl	800188c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2102      	movs	r1, #2
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fb37 	bl	8003aa0 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001438:	f000 fa28 	bl	800188c <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	3750      	adds	r7, #80	; 0x50
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001460:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <MX_ADC1_Init+0x9c>)
 8001462:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_ADC1_Init+0x98>)
 800146c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001470:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_ADC1_Init+0x98>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_ADC1_Init+0x98>)
 800148e:	4a17      	ldr	r2, [pc, #92]	; (80014ec <MX_ADC1_Init+0xa0>)
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_ADC1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_ADC1_Init+0x98>)
 800149a:	2201      	movs	r2, #1
 800149c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ac:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014ae:	f000 fd5d 	bl	8001f6c <HAL_ADC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014b8:	f000 f9e8 	bl	800188c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014bc:	2304      	movs	r3, #4
 80014be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_ADC1_Init+0x98>)
 80014ce:	f000 fef7 	bl	80022c0 <HAL_ADC_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014d8:	f000 f9d8 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000008c 	.word	0x2000008c
 80014e8:	40012000 	.word	0x40012000
 80014ec:	0f000001 	.word	0x0f000001

080014f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_USART2_UART_Init+0x58>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_USART2_UART_Init+0x5c>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_USART2_UART_Init+0x58>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_USART2_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USART2_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USART2_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USART2_UART_Init+0x58>)
 8001534:	f003 f8ca 	bl	80046cc <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 f9a5 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200000d4 	.word	0x200000d4
 800154c:	40004400 	.word	0x40004400

08001550 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART3_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART3_UART_Init+0x58>)
 8001594:	f003 f89a 	bl	80046cc <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800159e:	f000 f975 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000015c 	.word	0x2000015c
 80015ac:	40004800 	.word	0x40004800

080015b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_USART6_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART6_UART_Init+0x58>)
 80015f4:	f003 f86a 	bl	80046cc <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 f945 	bl	800188c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200001e4 	.word	0x200001e4
 800160c:	40011400 	.word	0x40011400

08001610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_DMA_Init+0x48>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <MX_DMA_Init+0x48>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_DMA_Init+0x48>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	2039      	movs	r0, #57	; 0x39
 8001634:	f001 f96f 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001638:	2039      	movs	r0, #57	; 0x39
 800163a:	f001 f988 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2045      	movs	r0, #69	; 0x45
 8001644:	f001 f967 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001648:	2045      	movs	r0, #69	; 0x45
 800164a:	f001 f980 	bl	800294e <HAL_NVIC_EnableIRQ>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b81      	ldr	r3, [pc, #516]	; (8001878 <MX_GPIO_Init+0x21c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a80      	ldr	r2, [pc, #512]	; (8001878 <MX_GPIO_Init+0x21c>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b7e      	ldr	r3, [pc, #504]	; (8001878 <MX_GPIO_Init+0x21c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <MX_GPIO_Init+0x21c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a7a      	ldr	r2, [pc, #488]	; (8001878 <MX_GPIO_Init+0x21c>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b78      	ldr	r3, [pc, #480]	; (8001878 <MX_GPIO_Init+0x21c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b75      	ldr	r3, [pc, #468]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a74      	ldr	r2, [pc, #464]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b72      	ldr	r3, [pc, #456]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	4b69      	ldr	r3, [pc, #420]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a68      	ldr	r2, [pc, #416]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b66      	ldr	r3, [pc, #408]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ea:	4b63      	ldr	r3, [pc, #396]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a62      	ldr	r2, [pc, #392]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <MX_GPIO_Init+0x21c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f244 0181 	movw	r1, #16513	; 0x4081
 8001708:	485c      	ldr	r0, [pc, #368]	; (800187c <MX_GPIO_Init+0x220>)
 800170a:	f001 fef1 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2140      	movs	r1, #64	; 0x40
 8001712:	485b      	ldr	r0, [pc, #364]	; (8001880 <MX_GPIO_Init+0x224>)
 8001714:	f001 feec 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoggerRelay_GPIO_Port, LoggerRelay_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171e:	4859      	ldr	r0, [pc, #356]	; (8001884 <MX_GPIO_Init+0x228>)
 8001720:	f001 fee6 	bl	80034f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	4619      	mov	r1, r3
 800173a:	4852      	ldr	r0, [pc, #328]	; (8001884 <MX_GPIO_Init+0x228>)
 800173c:	f001 fd2c 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001740:	2332      	movs	r3, #50	; 0x32
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001750:	230b      	movs	r3, #11
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	484a      	ldr	r0, [pc, #296]	; (8001884 <MX_GPIO_Init+0x228>)
 800175c:	f001 fd1c 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001760:	2386      	movs	r3, #134	; 0x86
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001770:	230b      	movs	r3, #11
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4843      	ldr	r0, [pc, #268]	; (8001888 <MX_GPIO_Init+0x22c>)
 800177c:	f001 fd0c 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001780:	f244 0381 	movw	r3, #16513	; 0x4081
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	4838      	ldr	r0, [pc, #224]	; (800187c <MX_GPIO_Init+0x220>)
 800179a:	f001 fcfd 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017b0:	230b      	movs	r3, #11
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017b4:	f107 031c 	add.w	r3, r7, #28
 80017b8:	4619      	mov	r1, r3
 80017ba:	4830      	ldr	r0, [pc, #192]	; (800187c <MX_GPIO_Init+0x220>)
 80017bc:	f001 fcec 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017c0:	2340      	movs	r3, #64	; 0x40
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	482a      	ldr	r0, [pc, #168]	; (8001880 <MX_GPIO_Init+0x224>)
 80017d8:	f001 fcde 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4824      	ldr	r0, [pc, #144]	; (8001880 <MX_GPIO_Init+0x224>)
 80017f0:	f001 fcd2 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoggerRelay_Pin */
  GPIO_InitStruct.Pin = LoggerRelay_Pin;
 80017f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017fe:	2301      	movs	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LoggerRelay_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	481d      	ldr	r0, [pc, #116]	; (8001884 <MX_GPIO_Init+0x228>)
 800180e:	f001 fcc3 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001812:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001824:	230a      	movs	r3, #10
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 031c 	add.w	r3, r7, #28
 800182c:	4619      	mov	r1, r3
 800182e:	4816      	ldr	r0, [pc, #88]	; (8001888 <MX_GPIO_Init+0x22c>)
 8001830:	f001 fcb2 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	480f      	ldr	r0, [pc, #60]	; (8001888 <MX_GPIO_Init+0x22c>)
 800184a:	f001 fca5 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800184e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001860:	230b      	movs	r3, #11
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_GPIO_Init+0x224>)
 800186c:	f001 fc94 	bl	8003198 <HAL_GPIO_Init>

}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	; 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40020400 	.word	0x40020400
 8001880:	40021800 	.word	0x40021800
 8001884:	40020800 	.word	0x40020800
 8001888:	40020000 	.word	0x40020000

0800188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x8>
	...

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_MspInit+0x44>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_MspInit+0x44>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_MspInit+0x44>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_MspInit+0x44>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_MspInit+0x44>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800

080018e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a15      	ldr	r2, [pc, #84]	; (8001954 <HAL_ADC_MspInit+0x74>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d123      	bne.n	800194a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_ADC_MspInit+0x78>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_ADC_MspInit+0x78>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_ADC_MspInit+0x78>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_ADC_MspInit+0x78>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_ADC_MspInit+0x78>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_ADC_MspInit+0x78>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001932:	2310      	movs	r3, #16
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001936:	2303      	movs	r3, #3
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_ADC_MspInit+0x7c>)
 8001946:	f001 fc27 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40012000 	.word	0x40012000
 8001958:	40023800 	.word	0x40023800
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0b0      	sub	sp, #192	; 0xc0
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197c:	2284      	movs	r2, #132	; 0x84
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f004 fb16 	bl	8005fb2 <memset>
  if(huart->Instance==USART2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4aa7      	ldr	r2, [pc, #668]	; (8001c28 <HAL_UART_MspInit+0x2c8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d15c      	bne.n	8001a4a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001994:	2300      	movs	r3, #0
 8001996:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199c:	4618      	mov	r0, r3
 800199e:	f002 faa5 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019a8:	f7ff ff70 	bl	800188c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ac:	4b9f      	ldr	r3, [pc, #636]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a9e      	ldr	r2, [pc, #632]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b9c      	ldr	r3, [pc, #624]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b99      	ldr	r3, [pc, #612]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	4a98      	ldr	r2, [pc, #608]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6313      	str	r3, [r2, #48]	; 0x30
 80019d0:	4b96      	ldr	r3, [pc, #600]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
 80019e8:	4b90      	ldr	r3, [pc, #576]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f4:	2308      	movs	r3, #8
 80019f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a16:	4619      	mov	r1, r3
 8001a18:	4885      	ldr	r0, [pc, #532]	; (8001c30 <HAL_UART_MspInit+0x2d0>)
 8001a1a:	f001 fbbd 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a36:	2307      	movs	r3, #7
 8001a38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a40:	4619      	mov	r1, r3
 8001a42:	487c      	ldr	r0, [pc, #496]	; (8001c34 <HAL_UART_MspInit+0x2d4>)
 8001a44:	f001 fba8 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a48:	e0ea      	b.n	8001c20 <HAL_UART_MspInit+0x2c0>
  else if(huart->Instance==USART3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	; (8001c38 <HAL_UART_MspInit+0x2d8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d13d      	bne.n	8001ad0 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fa42 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_MspInit+0x112>
      Error_Handler();
 8001a6e:	f7ff ff0d 	bl	800188c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a72:	4b6e      	ldr	r3, [pc, #440]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a6d      	ldr	r2, [pc, #436]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b6b      	ldr	r3, [pc, #428]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a67      	ldr	r2, [pc, #412]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abc:	2307      	movs	r3, #7
 8001abe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	485a      	ldr	r0, [pc, #360]	; (8001c34 <HAL_UART_MspInit+0x2d4>)
 8001aca:	f001 fb65 	bl	8003198 <HAL_GPIO_Init>
}
 8001ace:	e0a7      	b.n	8001c20 <HAL_UART_MspInit+0x2c0>
  else if(huart->Instance==USART6)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a59      	ldr	r2, [pc, #356]	; (8001c3c <HAL_UART_MspInit+0x2dc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	f040 80a2 	bne.w	8001c20 <HAL_UART_MspInit+0x2c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 f9fd 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8001af8:	f7ff fec8 	bl	800188c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001afc:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	6453      	str	r3, [r2, #68]	; 0x44
 8001b08:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a44      	ldr	r2, [pc, #272]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <HAL_UART_MspInit+0x2cc>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2c:	23c0      	movs	r3, #192	; 0xc0
 8001b2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b44:	2308      	movs	r3, #8
 8001b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b4e:	4619      	mov	r1, r3
 8001b50:	483b      	ldr	r0, [pc, #236]	; (8001c40 <HAL_UART_MspInit+0x2e0>)
 8001b52:	f001 fb21 	bl	8003198 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b58:	4a3b      	ldr	r2, [pc, #236]	; (8001c48 <HAL_UART_MspInit+0x2e8>)
 8001b5a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001b5c:	4b39      	ldr	r3, [pc, #228]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b5e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b62:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b64:	4b37      	ldr	r3, [pc, #220]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b76:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b8a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b98:	482a      	ldr	r0, [pc, #168]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001b9a:	f000 fef3 	bl	8002984 <HAL_DMA_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_UART_MspInit+0x248>
      Error_Handler();
 8001ba4:	f7ff fe72 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a26      	ldr	r2, [pc, #152]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001bac:	675a      	str	r2, [r3, #116]	; 0x74
 8001bae:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <HAL_UART_MspInit+0x2e4>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_UART_MspInit+0x2f0>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bbc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001bc0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001be2:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001bf4:	4815      	ldr	r0, [pc, #84]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001bf6:	f000 fec5 	bl	8002984 <HAL_DMA_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 8001c00:	f7ff fe44 	bl	800188c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001c08:	671a      	str	r2, [r3, #112]	; 0x70
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <HAL_UART_MspInit+0x2ec>)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2047      	movs	r0, #71	; 0x47
 8001c16:	f000 fe7e 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c1a:	2047      	movs	r0, #71	; 0x47
 8001c1c:	f000 fe97 	bl	800294e <HAL_NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	37c0      	adds	r7, #192	; 0xc0
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40004800 	.word	0x40004800
 8001c3c:	40011400 	.word	0x40011400
 8001c40:	40020800 	.word	0x40020800
 8001c44:	2000026c 	.word	0x2000026c
 8001c48:	40026428 	.word	0x40026428
 8001c4c:	200002cc 	.word	0x200002cc
 8001c50:	400264a0 	.word	0x400264a0

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca0:	f000 f920 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <DMA2_Stream1_IRQHandler+0x10>)
 8001cae:	f001 f809 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000026c 	.word	0x2000026c

08001cbc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DMA2_Stream6_IRQHandler+0x10>)
 8001cc2:	f000 ffff 	bl	8002cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200002cc 	.word	0x200002cc

08001cd0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <USART6_IRQHandler+0x10>)
 8001cd6:	f002 fe0f 	bl	80048f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200001e4 	.word	0x200001e4

08001ce4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00a      	b.n	8001d0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cf6:	f3af 8000 	nop.w
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	b2ca      	uxtb	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	dbf0      	blt.n	8001cf6 <_read+0x12>
	}

return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	return -1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d46:	605a      	str	r2, [r3, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_isatty>:

int _isatty(int file)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	return 0;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f003 ff04 	bl	8005bc4 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20050000 	.word	0x20050000
 8001de8:	00000400 	.word	0x00000400
 8001dec:	200003cc 	.word	0x200003cc
 8001df0:	200003e8 	.word	0x200003e8

08001df4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <SystemInit+0x20>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <SystemInit+0x20>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e1c:	480d      	ldr	r0, [pc, #52]	; (8001e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e1e:	490e      	ldr	r1, [pc, #56]	; (8001e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e20:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e32:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e34:	4c0b      	ldr	r4, [pc, #44]	; (8001e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e42:	f7ff ffd7 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e46:	f004 f88d 	bl	8005f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4a:	f7ff f961 	bl	8001110 <main>
  bx  lr    
 8001e4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e50:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e58:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e5c:	08006d10 	.word	0x08006d10
  ldr r2, =_sbss
 8001e60:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e64:	200003e4 	.word	0x200003e4

08001e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e68:	e7fe      	b.n	8001e68 <ADC_IRQHandler>

08001e6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 fd46 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 f805 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7a:	f7ff fd0d 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_InitTick+0x54>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x58>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fd61 	bl	800296a <HAL_SYSTICK_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d80a      	bhi.n	8001ece <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec0:	f000 fd29 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <HAL_InitTick+0x5c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000008 	.word	0x20000008
 8001f08:	200003d0 	.word	0x200003d0

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200003d0 	.word	0x200003d0

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000008 	.word	0x20000008

08001f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e031      	b.n	8001fe6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fca8 	bl	80018e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_ADC_Init+0x84>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	f043 0202 	orr.w	r2, r3, #2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fad6 	bl	800256c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd6:	e001      	b.n	8001fdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	ffffeefd 	.word	0xffffeefd

08001ff4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADC_Start+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e0ad      	b.n	800216a <HAL_ADC_Start+0x176>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d018      	beq.n	8002056 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_ADC_Start+0x184>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a50      	ldr	r2, [pc, #320]	; (800217c <HAL_ADC_Start+0x188>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0c9a      	lsrs	r2, r3, #18
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002048:	e002      	b.n	8002050 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3b01      	subs	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f9      	bne.n	800204a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d175      	bne.n	8002150 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002068:	4b45      	ldr	r3, [pc, #276]	; (8002180 <HAL_ADC_Start+0x18c>)
 800206a:	4013      	ands	r3, r2
 800206c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800208a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800209a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209e:	d106      	bne.n	80020ae <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	f023 0206 	bic.w	r2, r3, #6
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020c4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_ADC_Start+0x190>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d143      	bne.n	8002168 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e03a      	b.n	8002168 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a24      	ldr	r2, [pc, #144]	; (8002188 <HAL_ADC_Start+0x194>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10e      	bne.n	800211a <HAL_ADC_Start+0x126>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002118:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_ADC_Start+0x190>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0310 	and.w	r3, r3, #16
 8002122:	2b00      	cmp	r3, #0
 8002124:	d120      	bne.n	8002168 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_ADC_Start+0x198>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d11b      	bne.n	8002168 <HAL_ADC_Start+0x174>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d114      	bne.n	8002168 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e00b      	b.n	8002168 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f043 0210 	orr.w	r2, r3, #16
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000
 800217c:	431bde83 	.word	0x431bde83
 8002180:	fffff8fe 	.word	0xfffff8fe
 8002184:	40012300 	.word	0x40012300
 8002188:	40012000 	.word	0x40012000
 800218c:	40012200 	.word	0x40012200

08002190 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d113      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021bc:	d10b      	bne.n	80021d6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f043 0220 	orr.w	r2, r3, #32
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e063      	b.n	800229e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021d6:	f7ff fe99 	bl	8001f0c <HAL_GetTick>
 80021da:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021dc:	e021      	b.n	8002222 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d01d      	beq.n	8002222 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_ADC_PollForConversion+0x6c>
 80021ec:	f7ff fe8e 	bl	8001f0c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d212      	bcs.n	8002222 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d00b      	beq.n	8002222 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e03d      	b.n	800229e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b02      	cmp	r3, #2
 800222e:	d1d6      	bne.n	80021de <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0212 	mvn.w	r2, #18
 8002238:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d123      	bne.n	800229c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d11f      	bne.n	800229c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002274:	2b00      	cmp	r3, #0
 8002276:	d111      	bne.n	800229c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x1c>
 80022d8:	2302      	movs	r3, #2
 80022da:	e136      	b.n	800254a <HAL_ADC_ConfigChannel+0x28a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b09      	cmp	r3, #9
 80022ea:	d93a      	bls.n	8002362 <HAL_ADC_ConfigChannel+0xa2>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022f4:	d035      	beq.n	8002362 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68d9      	ldr	r1, [r3, #12]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	4613      	mov	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4413      	add	r3, r2
 800230a:	3b1e      	subs	r3, #30
 800230c:	2207      	movs	r2, #7
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a8d      	ldr	r2, [pc, #564]	; (8002558 <HAL_ADC_ConfigChannel+0x298>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d10a      	bne.n	800233c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	061a      	lsls	r2, r3, #24
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233a:	e035      	b.n	80023a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	4603      	mov	r3, r0
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4403      	add	r3, r0
 8002354:	3b1e      	subs	r3, #30
 8002356:	409a      	lsls	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002360:	e022      	b.n	80023a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6919      	ldr	r1, [r3, #16]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	2207      	movs	r2, #7
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43da      	mvns	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	400a      	ands	r2, r1
 8002384:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	4603      	mov	r3, r0
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4403      	add	r3, r0
 800239e:	409a      	lsls	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d824      	bhi.n	80023fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3b05      	subs	r3, #5
 80023c2:	221f      	movs	r2, #31
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	400a      	ands	r2, r1
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4618      	mov	r0, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	3b05      	subs	r3, #5
 80023ec:	fa00 f203 	lsl.w	r2, r0, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
 80023f8:	e04c      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d824      	bhi.n	800244c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b23      	subs	r3, #35	; 0x23
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b23      	subs	r3, #35	; 0x23
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	631a      	str	r2, [r3, #48]	; 0x30
 800244a:	e023      	b.n	8002494 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	3b41      	subs	r3, #65	; 0x41
 800245e:	221f      	movs	r2, #31
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43da      	mvns	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	400a      	ands	r2, r1
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3b41      	subs	r3, #65	; 0x41
 8002488:	fa00 f203 	lsl.w	r2, r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a30      	ldr	r2, [pc, #192]	; (800255c <HAL_ADC_ConfigChannel+0x29c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10a      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1f4>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80024b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <HAL_ADC_ConfigChannel+0x29c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10f      	bne.n	80024de <HAL_ADC_ConfigChannel+0x21e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b12      	cmp	r3, #18
 80024c4:	d10b      	bne.n	80024de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80024c6:	4b26      	ldr	r3, [pc, #152]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a25      	ldr	r2, [pc, #148]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1e      	ldr	r2, [pc, #120]	; (800255c <HAL_ADC_ConfigChannel+0x29c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d12b      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x280>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_ADC_ConfigChannel+0x298>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d003      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x23a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b11      	cmp	r3, #17
 80024f8:	d122      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 8002500:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002504:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a15      	ldr	r2, [pc, #84]	; (8002560 <HAL_ADC_ConfigChannel+0x2a0>)
 800250c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002510:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_ADC_ConfigChannel+0x298>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d111      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_ADC_ConfigChannel+0x2a4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a11      	ldr	r2, [pc, #68]	; (8002568 <HAL_ADC_ConfigChannel+0x2a8>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0c9a      	lsrs	r2, r3, #18
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002532:	e002      	b.n	800253a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3b01      	subs	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f9      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	10000012 	.word	0x10000012
 800255c:	40012000 	.word	0x40012000
 8002560:	40012300 	.word	0x40012300
 8002564:	20000000 	.word	0x20000000
 8002568:	431bde83 	.word	0x431bde83

0800256c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002574:	4b78      	ldr	r3, [pc, #480]	; (8002758 <ADC_Init+0x1ec>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a77      	ldr	r2, [pc, #476]	; (8002758 <ADC_Init+0x1ec>)
 800257a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800257e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002580:	4b75      	ldr	r3, [pc, #468]	; (8002758 <ADC_Init+0x1ec>)
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	4973      	ldr	r1, [pc, #460]	; (8002758 <ADC_Init+0x1ec>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800259c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	4a58      	ldr	r2, [pc, #352]	; (800275c <ADC_Init+0x1f0>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d022      	beq.n	8002646 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800260e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6899      	ldr	r1, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6899      	ldr	r1, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	e00f      	b.n	8002666 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002664:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0202 	bic.w	r2, r2, #2
 8002674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6899      	ldr	r1, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	005a      	lsls	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	3b01      	subs	r3, #1
 80026c0:	035a      	lsls	r2, r3, #13
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	e007      	b.n	80026dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	051a      	lsls	r2, r3, #20
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6899      	ldr	r1, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800271e:	025a      	lsls	r2, r3, #9
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6899      	ldr	r1, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	029a      	lsls	r2, r3, #10
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40012300 	.word	0x40012300
 800275c:	0f000001 	.word	0x0f000001

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800278e:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <__NVIC_SetPriorityGrouping+0x40>)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	60d3      	str	r3, [r2, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	05fa0000 	.word	0x05fa0000

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff fabc 	bl	8001f0c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e099      	b.n	8002ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c0:	e00f      	b.n	80029e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029c2:	f7ff faa3 	bl	8001f0c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d908      	bls.n	80029e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2203      	movs	r2, #3
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e078      	b.n	8002ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e8      	bne.n	80029c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <HAL_DMA_Init+0x158>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	4313      	orrs	r3, r2
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f023 0307 	bic.w	r3, r3, #7
 8002a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d117      	bne.n	8002aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fb09 	bl	80030a0 <DMA_CheckFifoParam>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fac0 	bl	8003034 <DMA_CalcBaseAndBitshift>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	223f      	movs	r2, #63	; 0x3f
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	f010803f 	.word	0xf010803f

08002ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_DMA_Start_IT+0x26>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e048      	b.n	8002b98 <HAL_DMA_Start_IT+0xb8>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d137      	bne.n	8002b8a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa52 	bl	8002fd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	223f      	movs	r2, #63	; 0x3f
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0216 	orr.w	r2, r2, #22
 8002b4e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b5e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0208 	orr.w	r2, r2, #8
 8002b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e005      	b.n	8002b96 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7ff f9ad 	bl	8001f0c <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e052      	b.n	8002c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0216 	bic.w	r2, r2, #22
 8002be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695a      	ldr	r2, [r3, #20]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <HAL_DMA_Abort+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0208 	bic.w	r2, r2, #8
 8002c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0201 	bic.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c22:	e013      	b.n	8002c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c24:	f7ff f972 	bl	8001f0c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d90c      	bls.n	8002c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2220      	movs	r2, #32
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e015      	b.n	8002c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1e4      	bne.n	8002c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	223f      	movs	r2, #63	; 0x3f
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d004      	beq.n	8002c9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00c      	b.n	8002cb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cd0:	4b8e      	ldr	r3, [pc, #568]	; (8002f0c <HAL_DMA_IRQHandler+0x248>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a8e      	ldr	r2, [pc, #568]	; (8002f10 <HAL_DMA_IRQHandler+0x24c>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2208      	movs	r2, #8
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01a      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0204 	bic.w	r2, r2, #4
 8002d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	2201      	movs	r2, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2201      	movs	r2, #1
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	f043 0202 	orr.w	r2, r3, #2
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00b      	beq.n	8002d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	2204      	movs	r2, #4
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	2210      	movs	r2, #16
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d043      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03c      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d018      	beq.n	8002e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d108      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d024      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
 8002df2:	e01f      	b.n	8002e34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01b      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	4798      	blx	r3
 8002e04:	e016      	b.n	8002e34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0208 	bic.w	r2, r2, #8
 8002e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e38:	2220      	movs	r2, #32
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 808f 	beq.w	8002f64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8087 	beq.w	8002f64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d136      	bne.n	8002edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0216 	bic.w	r2, r2, #22
 8002e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d103      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x1da>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0208 	bic.w	r2, r2, #8
 8002eac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	223f      	movs	r2, #63	; 0x3f
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d07e      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
        }
        return;
 8002eda:	e079      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
 8002f08:	e02c      	b.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
 8002f0a:	bf00      	nop
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d023      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
 8002f24:	e01e      	b.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10f      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0210 	bic.w	r2, r2, #16
 8002f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d032      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d022      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0201 	bic.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d307      	bcc.n	8002fac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f2      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x2cc>
 8002faa:	e000      	b.n	8002fae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
 8002fce:	e000      	b.n	8002fd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fd0:	bf00      	nop
    }
  }
}
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d108      	bne.n	8003018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003016:	e007      	b.n	8003028 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3b10      	subs	r3, #16
 8003044:	4a13      	ldr	r2, [pc, #76]	; (8003094 <DMA_CalcBaseAndBitshift+0x60>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <DMA_CalcBaseAndBitshift+0x64>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d908      	bls.n	8003074 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <DMA_CalcBaseAndBitshift+0x68>)
 800306a:	4013      	ands	r3, r2
 800306c:	1d1a      	adds	r2, r3, #4
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	659a      	str	r2, [r3, #88]	; 0x58
 8003072:	e006      	b.n	8003082 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <DMA_CalcBaseAndBitshift+0x68>)
 800307c:	4013      	ands	r3, r2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	aaaaaaab 	.word	0xaaaaaaab
 8003098:	08006c60 	.word	0x08006c60
 800309c:	fffffc00 	.word	0xfffffc00

080030a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d11f      	bne.n	80030fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d856      	bhi.n	800316e <DMA_CheckFifoParam+0xce>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <DMA_CheckFifoParam+0x28>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030eb 	.word	0x080030eb
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	0800316f 	.word	0x0800316f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d046      	beq.n	8003172 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e8:	e043      	b.n	8003172 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f2:	d140      	bne.n	8003176 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e03d      	b.n	8003176 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	d121      	bne.n	8003148 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d837      	bhi.n	800317a <DMA_CheckFifoParam+0xda>
 800310a:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <DMA_CheckFifoParam+0x70>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003121 	.word	0x08003121
 8003114:	08003127 	.word	0x08003127
 8003118:	08003121 	.word	0x08003121
 800311c:	08003139 	.word	0x08003139
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e030      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d025      	beq.n	800317e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003136:	e022      	b.n	800317e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003140:	d11f      	bne.n	8003182 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003146:	e01c      	b.n	8003182 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d903      	bls.n	8003156 <DMA_CheckFifoParam+0xb6>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d003      	beq.n	800315c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003154:	e018      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      break;
 800315a:	e015      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e00b      	b.n	8003186 <DMA_CheckFifoParam+0xe6>
      break;
 800316e:	bf00      	nop
 8003170:	e00a      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 8003172:	bf00      	nop
 8003174:	e008      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
 8003178:	e006      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
 800317c:	e004      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e002      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;   
 8003182:	bf00      	nop
 8003184:	e000      	b.n	8003188 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
    }
  } 
  
  return status; 
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e175      	b.n	80034a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f040 8164 	bne.w	800349e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d005      	beq.n	80031ee <HAL_GPIO_Init+0x56>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d130      	bne.n	8003250 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	2203      	movs	r2, #3
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003224:	2201      	movs	r2, #1
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 0201 	and.w	r2, r3, #1
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b03      	cmp	r3, #3
 800325a:	d017      	beq.n	800328c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d123      	bne.n	80032e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	08da      	lsrs	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3208      	adds	r2, #8
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80be 	beq.w	800349e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_GPIO_Init+0x324>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a65      	ldr	r2, [pc, #404]	; (80034bc <HAL_GPIO_Init+0x324>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	4b63      	ldr	r3, [pc, #396]	; (80034bc <HAL_GPIO_Init+0x324>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800333a:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_GPIO_Init+0x328>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a58      	ldr	r2, [pc, #352]	; (80034c4 <HAL_GPIO_Init+0x32c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d037      	beq.n	80033d6 <HAL_GPIO_Init+0x23e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_GPIO_Init+0x330>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_GPIO_Init+0x23a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a56      	ldr	r2, [pc, #344]	; (80034cc <HAL_GPIO_Init+0x334>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x236>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a55      	ldr	r2, [pc, #340]	; (80034d0 <HAL_GPIO_Init+0x338>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x232>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a54      	ldr	r2, [pc, #336]	; (80034d4 <HAL_GPIO_Init+0x33c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x22e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a53      	ldr	r2, [pc, #332]	; (80034d8 <HAL_GPIO_Init+0x340>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x22a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a52      	ldr	r2, [pc, #328]	; (80034dc <HAL_GPIO_Init+0x344>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x226>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a51      	ldr	r2, [pc, #324]	; (80034e0 <HAL_GPIO_Init+0x348>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x222>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_GPIO_Init+0x34c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x21e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4f      	ldr	r2, [pc, #316]	; (80034e8 <HAL_GPIO_Init+0x350>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x21a>
 80033ae:	2309      	movs	r3, #9
 80033b0:	e012      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033b2:	230a      	movs	r3, #10
 80033b4:	e010      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e00e      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ba:	2307      	movs	r3, #7
 80033bc:	e00c      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033be:	2306      	movs	r3, #6
 80033c0:	e00a      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033e8:	4935      	ldr	r1, [pc, #212]	; (80034c0 <HAL_GPIO_Init+0x328>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_GPIO_Init+0x354>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341a:	4a34      	ldr	r2, [pc, #208]	; (80034ec <HAL_GPIO_Init+0x354>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_GPIO_Init+0x354>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003444:	4a29      	ldr	r2, [pc, #164]	; (80034ec <HAL_GPIO_Init+0x354>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800344a:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_GPIO_Init+0x354>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_GPIO_Init+0x354>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_GPIO_Init+0x354>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003498:	4a14      	ldr	r2, [pc, #80]	; (80034ec <HAL_GPIO_Init+0x354>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f ae86 	bls.w	80031b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3724      	adds	r7, #36	; 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40013800 	.word	0x40013800
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40020400 	.word	0x40020400
 80034cc:	40020800 	.word	0x40020800
 80034d0:	40020c00 	.word	0x40020c00
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40021400 	.word	0x40021400
 80034dc:	40021800 	.word	0x40021800
 80034e0:	40021c00 	.word	0x40021c00
 80034e4:	40022000 	.word	0x40022000
 80034e8:	40022400 	.word	0x40022400
 80034ec:	40013c00 	.word	0x40013c00

080034f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
 80034fc:	4613      	mov	r3, r2
 80034fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800350c:	e003      	b.n	8003516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	041a      	lsls	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003534:	887a      	ldrh	r2, [r7, #2]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	4013      	ands	r3, r2
 800353a:	041a      	lsls	r2, r3, #16
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	43d9      	mvns	r1, r3
 8003540:	887b      	ldrh	r3, [r7, #2]
 8003542:	400b      	ands	r3, r1
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e291      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 8087 	beq.w	800368a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800357c:	4b96      	ldr	r3, [pc, #600]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
 8003584:	2b04      	cmp	r3, #4
 8003586:	d00c      	beq.n	80035a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003588:	4b93      	ldr	r3, [pc, #588]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d112      	bne.n	80035ba <HAL_RCC_OscConfig+0x62>
 8003594:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a0:	d10b      	bne.n	80035ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a2:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d06c      	beq.n	8003688 <HAL_RCC_OscConfig+0x130>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d168      	bne.n	8003688 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e26b      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x7a>
 80035c4:	4b84      	ldr	r3, [pc, #528]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a83      	ldr	r2, [pc, #524]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	e02e      	b.n	8003630 <HAL_RCC_OscConfig+0xd8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x9c>
 80035da:	4b7f      	ldr	r3, [pc, #508]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a7e      	ldr	r2, [pc, #504]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	4b7c      	ldr	r3, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80035ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xd8>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0xc0>
 80035fe:	4b76      	ldr	r3, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a75      	ldr	r2, [pc, #468]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b73      	ldr	r3, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a72      	ldr	r2, [pc, #456]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xd8>
 8003618:	4b6f      	ldr	r3, [pc, #444]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a6e      	ldr	r2, [pc, #440]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a6b      	ldr	r2, [pc, #428]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe fc68 	bl	8001f0c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003640:	f7fe fc64 	bl	8001f0c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e21f      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xe8>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe fc54 	bl	8001f0c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe fc50 	bl	8001f0c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e20b      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x110>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d069      	beq.n	800376a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003696:	4b50      	ldr	r3, [pc, #320]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b4d      	ldr	r3, [pc, #308]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x190>
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x17a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1df      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	493d      	ldr	r1, [pc, #244]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e040      	b.n	800376a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d023      	beq.n	8003738 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a38      	ldr	r2, [pc, #224]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fc06 	bl	8001f0c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003704:	f7fe fc02 	bl	8001f0c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1bd      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003716:	4b30      	ldr	r3, [pc, #192]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b2d      	ldr	r3, [pc, #180]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4929      	ldr	r1, [pc, #164]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
 8003736:	e018      	b.n	800376a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a26      	ldr	r2, [pc, #152]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fbe2 	bl	8001f0c <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fbde 	bl	8001f0c <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e199      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d038      	beq.n	80037e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d019      	beq.n	80037b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800377e:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003782:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe fbbf 	bl	8001f0c <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003792:	f7fe fbbb 	bl	8001f0c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e176      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037a4:	4b0c      	ldr	r3, [pc, #48]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x23a>
 80037b0:	e01a      	b.n	80037e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037b2:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b6:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <HAL_RCC_OscConfig+0x280>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe fba5 	bl	8001f0c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c4:	e00a      	b.n	80037dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe fba1 	bl	8001f0c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d903      	bls.n	80037dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e15c      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
 80037d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037dc:	4b91      	ldr	r3, [pc, #580]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80037de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ee      	bne.n	80037c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80a4 	beq.w	800393e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f6:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003802:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a87      	ldr	r2, [pc, #540]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381a:	2301      	movs	r3, #1
 800381c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800381e:	4b82      	ldr	r3, [pc, #520]	; (8003a28 <HAL_RCC_OscConfig+0x4d0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d118      	bne.n	800385c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800382a:	4b7f      	ldr	r3, [pc, #508]	; (8003a28 <HAL_RCC_OscConfig+0x4d0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7e      	ldr	r2, [pc, #504]	; (8003a28 <HAL_RCC_OscConfig+0x4d0>)
 8003830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003836:	f7fe fb69 	bl	8001f0c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383e:	f7fe fb65 	bl	8001f0c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b64      	cmp	r3, #100	; 0x64
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e120      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003850:	4b75      	ldr	r3, [pc, #468]	; (8003a28 <HAL_RCC_OscConfig+0x4d0>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d106      	bne.n	8003872 <HAL_RCC_OscConfig+0x31a>
 8003864:	4b6f      	ldr	r3, [pc, #444]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003868:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6713      	str	r3, [r2, #112]	; 0x70
 8003870:	e02d      	b.n	80038ce <HAL_RCC_OscConfig+0x376>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10c      	bne.n	8003894 <HAL_RCC_OscConfig+0x33c>
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	6713      	str	r3, [r2, #112]	; 0x70
 8003886:	4b67      	ldr	r3, [pc, #412]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a66      	ldr	r2, [pc, #408]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	e01c      	b.n	80038ce <HAL_RCC_OscConfig+0x376>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b05      	cmp	r3, #5
 800389a:	d10c      	bne.n	80038b6 <HAL_RCC_OscConfig+0x35e>
 800389c:	4b61      	ldr	r3, [pc, #388]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a60      	ldr	r2, [pc, #384]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	e00b      	b.n	80038ce <HAL_RCC_OscConfig+0x376>
 80038b6:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5a      	ldr	r2, [pc, #360]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	4b58      	ldr	r3, [pc, #352]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a57      	ldr	r2, [pc, #348]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d015      	beq.n	8003902 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe fb19 	bl	8001f0c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fb15 	bl	8001f0c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0ce      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0ee      	beq.n	80038de <HAL_RCC_OscConfig+0x386>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7fe fb03 	bl	8001f0c <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003908:	e00a      	b.n	8003920 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390a:	f7fe faff 	bl	8001f0c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f241 3288 	movw	r2, #5000	; 0x1388
 8003918:	4293      	cmp	r3, r2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003920:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ee      	bne.n	800390a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d105      	bne.n	800393e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003932:	4b3c      	ldr	r3, [pc, #240]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a3b      	ldr	r2, [pc, #236]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80a4 	beq.w	8003a90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003948:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d06b      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b02      	cmp	r3, #2
 800395a:	d149      	bne.n	80039f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a30      	ldr	r2, [pc, #192]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fe fad0 	bl	8001f0c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe facc 	bl	8001f0c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e087      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	019b      	lsls	r3, r3, #6
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	3b01      	subs	r3, #1
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	061b      	lsls	r3, r3, #24
 80039b2:	4313      	orrs	r3, r2
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe faa0 	bl	8001f0c <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fe fa9c 	bl	8001f0c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e057      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e2:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x478>
 80039ee:	e04f      	b.n	8003a90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0b      	ldr	r2, [pc, #44]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 80039f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fa86 	bl	8001f0c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fe fa82 	bl	8001f0c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e03d      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a16:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_OscConfig+0x4cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f0      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4ac>
 8003a22:	e035      	b.n	8003a90 <HAL_RCC_OscConfig+0x538>
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_RCC_OscConfig+0x544>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d028      	beq.n	8003a8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d121      	bne.n	8003a8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d11a      	bne.n	8003a8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	3b01      	subs	r3, #1
 8003a76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0d0      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d910      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 020f 	bic.w	r2, r3, #15
 8003ace:	4965      	ldr	r1, [pc, #404]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0b8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b00:	4b59      	ldr	r3, [pc, #356]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a58      	ldr	r2, [pc, #352]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b18:	4b53      	ldr	r3, [pc, #332]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a52      	ldr	r2, [pc, #328]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	494d      	ldr	r1, [pc, #308]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d040      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d115      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e07f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e073      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b72:	4b3d      	ldr	r3, [pc, #244]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06b      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b82:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f023 0203 	bic.w	r2, r3, #3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4936      	ldr	r1, [pc, #216]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b94:	f7fe f9ba 	bl	8001f0c <HAL_GetTick>
 8003b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9c:	f7fe f9b6 	bl	8001f0c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e053      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 020c 	and.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d1eb      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d210      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 020f 	bic.w	r2, r3, #15
 8003bda:	4922      	ldr	r1, [pc, #136]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e032      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c00:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4916      	ldr	r1, [pc, #88]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c1e:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	490e      	ldr	r1, [pc, #56]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c32:	f000 f821 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490a      	ldr	r1, [pc, #40]	; (8003c6c <HAL_RCC_ClockConfig+0x1cc>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a09      	ldr	r2, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1d0>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1d4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe f916 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023c00 	.word	0x40023c00
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08006c48 	.word	0x08006c48
 8003c70:	20000000 	.word	0x20000000
 8003c74:	20000004 	.word	0x20000004

08003c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7c:	b094      	sub	sp, #80	; 0x50
 8003c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	647b      	str	r3, [r7, #68]	; 0x44
 8003c84:	2300      	movs	r3, #0
 8003c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c88:	2300      	movs	r3, #0
 8003c8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c90:	4b79      	ldr	r3, [pc, #484]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	f200 80e1 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x34>
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003caa:	e0db      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cac:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb0:	e0db      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cb2:	4b73      	ldr	r3, [pc, #460]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cb6:	e0d8      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d063      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b6a      	ldr	r3, [pc, #424]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0159      	lsls	r1, r3, #5
 8003cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfc:	0150      	lsls	r0, r2, #5
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4621      	mov	r1, r4
 8003d04:	1a51      	subs	r1, r2, r1
 8003d06:	6139      	str	r1, [r7, #16]
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	018b      	lsls	r3, r1, #6
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d26:	4651      	mov	r1, sl
 8003d28:	018a      	lsls	r2, r1, #6
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d30:	4659      	mov	r1, fp
 8003d32:	eb63 0901 	sbc.w	r9, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4a:	4690      	mov	r8, r2
 8003d4c:	4699      	mov	r9, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	eb18 0303 	adds.w	r3, r8, r3
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	462b      	mov	r3, r5
 8003d58:	eb49 0303 	adc.w	r3, r9, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	024b      	lsls	r3, r1, #9
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d74:	4621      	mov	r1, r4
 8003d76:	024a      	lsls	r2, r1, #9
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d7e:	2200      	movs	r2, #0
 8003d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d88:	f7fc ff60 	bl	8000c4c <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d94:	e058      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b38      	ldr	r3, [pc, #224]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	4611      	mov	r1, r2
 8003da2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	0159      	lsls	r1, r3, #5
 8003dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc2:	0150      	lsls	r0, r2, #5
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dce:	4649      	mov	r1, r9
 8003dd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dec:	eb63 050b 	sbc.w	r5, r3, fp
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	00eb      	lsls	r3, r5, #3
 8003dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfe:	00e2      	lsls	r2, r4, #3
 8003e00:	4614      	mov	r4, r2
 8003e02:	461d      	mov	r5, r3
 8003e04:	4643      	mov	r3, r8
 8003e06:	18e3      	adds	r3, r4, r3
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb45 0303 	adc.w	r3, r5, r3
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e32:	2200      	movs	r2, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	61fa      	str	r2, [r7, #28]
 8003e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3c:	f7fc ff06 	bl	8000c4c <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	3301      	adds	r3, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3750      	adds	r7, #80	; 0x50
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	007a1200 	.word	0x007a1200

08003e84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	08006c58 	.word	0x08006c58

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffdc 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0b5b      	lsrs	r3, r3, #13
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	08006c58 	.word	0x08006c58

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f14:	4b69      	ldr	r3, [pc, #420]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a68      	ldr	r2, [pc, #416]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f1e:	6093      	str	r3, [r2, #8]
 8003f20:	4b66      	ldr	r3, [pc, #408]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4964      	ldr	r1, [pc, #400]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f46:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	4959      	ldr	r1, [pc, #356]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d017      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	494a      	ldr	r1, [pc, #296]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 808b 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
 8003fdc:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd ff8a 	bl	8001f0c <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd ff86 	bl	8001f0c <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e357      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800401a:	4b28      	ldr	r3, [pc, #160]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d035      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d02e      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404e:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800405a:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d114      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd ff4e 	bl	8001f0c <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	e00a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fd ff4a 	bl	8001f0c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e319      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ee      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a2:	d111      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	4901      	ldr	r1, [pc, #4]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	0ffffcff 	.word	0x0ffffcff
 80040c8:	4baa      	ldr	r3, [pc, #680]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4aa9      	ldr	r2, [pc, #676]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	4ba7      	ldr	r3, [pc, #668]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	49a4      	ldr	r1, [pc, #656]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f2:	4ba0      	ldr	r3, [pc, #640]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f8:	4a9e      	ldr	r2, [pc, #632]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004102:	4b9c      	ldr	r3, [pc, #624]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	4999      	ldr	r1, [pc, #612]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004120:	4b94      	ldr	r3, [pc, #592]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412e:	4991      	ldr	r1, [pc, #580]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004142:	4b8c      	ldr	r3, [pc, #560]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004150:	4988      	ldr	r1, [pc, #544]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004164:	4b83      	ldr	r3, [pc, #524]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	4980      	ldr	r1, [pc, #512]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004186:	4b7b      	ldr	r3, [pc, #492]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	4977      	ldr	r1, [pc, #476]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a8:	4b72      	ldr	r3, [pc, #456]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	496f      	ldr	r1, [pc, #444]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ca:	4b6a      	ldr	r3, [pc, #424]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f023 020c 	bic.w	r2, r3, #12
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	4966      	ldr	r1, [pc, #408]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ec:	4b61      	ldr	r3, [pc, #388]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	495e      	ldr	r1, [pc, #376]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420e:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	4955      	ldr	r1, [pc, #340]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004230:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004252:	4b48      	ldr	r3, [pc, #288]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	4944      	ldr	r1, [pc, #272]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004274:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	493c      	ldr	r1, [pc, #240]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a4:	4933      	ldr	r1, [pc, #204]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b8:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c6:	492b      	ldr	r1, [pc, #172]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042da:	4b26      	ldr	r3, [pc, #152]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e8:	4922      	ldr	r1, [pc, #136]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431a:	4b16      	ldr	r3, [pc, #88]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	4912      	ldr	r1, [pc, #72]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434c:	4909      	ldr	r1, [pc, #36]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d006      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d9 	beq.w	800451a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004368:	4b02      	ldr	r3, [pc, #8]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a01      	ldr	r2, [pc, #4]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004372:	e001      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004374:	40023800 	.word	0x40023800
 8004378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437a:	f7fd fdc7 	bl	8001f0c <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004382:	f7fd fdc3 	bl	8001f0c <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	; 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e194      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004394:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1f0      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d021      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11d      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043b4:	4b64      	ldr	r3, [pc, #400]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ba:	0c1b      	lsrs	r3, r3, #16
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043c2:	4b61      	ldr	r3, [pc, #388]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	019a      	lsls	r2, r3, #6
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	061b      	lsls	r3, r3, #24
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	071b      	lsls	r3, r3, #28
 80043e8:	4957      	ldr	r1, [pc, #348]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02e      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441a:	d129      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800441c:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	0f1b      	lsrs	r3, r3, #28
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	019a      	lsls	r2, r3, #6
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	431a      	orrs	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	493d      	ldr	r1, [pc, #244]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004458:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445e:	f023 021f 	bic.w	r2, r3, #31
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	3b01      	subs	r3, #1
 8004468:	4937      	ldr	r1, [pc, #220]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01d      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800447c:	4b32      	ldr	r3, [pc, #200]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004482:	0e1b      	lsrs	r3, r3, #24
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004490:	0f1b      	lsrs	r3, r3, #28
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	019a      	lsls	r2, r3, #6
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	071b      	lsls	r3, r3, #28
 80044b0:	4925      	ldr	r1, [pc, #148]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	019a      	lsls	r2, r3, #6
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	071b      	lsls	r3, r3, #28
 80044e0:	4919      	ldr	r1, [pc, #100]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd fd0a 	bl	8001f0c <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044fc:	f7fd fd06 	bl	8001f0c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0d7      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 80cd 	bne.w	80046bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452e:	f7fd fced 	bl	8001f0c <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004536:	f7fd fce9 	bl	8001f0c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d903      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0ba      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004548:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004558:	d0ed      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02e      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d12a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004582:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004590:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4944      	ldr	r1, [pc, #272]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045be:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	493d      	ldr	r1, [pc, #244]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d022      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ec:	d11d      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	0f1b      	lsrs	r3, r3, #28
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	019a      	lsls	r2, r3, #6
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	4929      	ldr	r1, [pc, #164]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d028      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	0e1b      	lsrs	r3, r3, #24
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004644:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	019a      	lsls	r2, r3, #6
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	431a      	orrs	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	071b      	lsls	r3, r3, #28
 800466a:	4917      	ldr	r1, [pc, #92]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4911      	ldr	r1, [pc, #68]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004694:	f7fd fc3a 	bl	8001f0c <HAL_GetTick>
 8004698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800469c:	f7fd fc36 	bl	8001f0c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e007      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ba:	d1ef      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e040      	b.n	8004760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fd f936 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fbfa 	bl	8004f04 <UART_SetConfig>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e022      	b.n	8004760 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fe52 	bl	80053cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fed9 	bl	8005510 <UART_CheckIdleState>
 800475e:	4603      	mov	r3, r0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	2b20      	cmp	r3, #32
 800477e:	d171      	bne.n	8004864 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_UART_Transmit+0x24>
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e06a      	b.n	8004866 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2221      	movs	r2, #33	; 0x21
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800479e:	f7fd fbb5 	bl	8001f0c <HAL_GetTick>
 80047a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d108      	bne.n	80047d0 <HAL_UART_Transmit+0x68>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d104      	bne.n	80047d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e003      	b.n	80047d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047d8:	e02c      	b.n	8004834 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f000 feca 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e038      	b.n	8004866 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10b      	bne.n	8004812 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004808:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	3302      	adds	r3, #2
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	e007      	b.n	8004822 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	3301      	adds	r3, #1
 8004820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1cc      	bne.n	80047da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2200      	movs	r2, #0
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fe97 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e005      	b.n	8004866 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b08a      	sub	sp, #40	; 0x28
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	4613      	mov	r3, r2
 800487a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004882:	2b20      	cmp	r3, #32
 8004884:	d132      	bne.n	80048ec <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_UART_Receive_DMA+0x24>
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e02b      	b.n	80048ee <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d018      	beq.n	80048dc <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	623b      	str	r3, [r7, #32]
 80048ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	461a      	mov	r2, r3
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 ff12 	bl	800570c <UART_Start_Receive_DMA>
 80048e8:	4603      	mov	r3, r0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b0ba      	sub	sp, #232	; 0xe8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800491e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004922:	f640 030f 	movw	r3, #2063	; 0x80f
 8004926:	4013      	ands	r3, r2
 8004928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800492c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d115      	bne.n	8004960 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00f      	beq.n	8004960 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d009      	beq.n	8004960 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8297 	beq.w	8004e84 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
      }
      return;
 800495e:	e291      	b.n	8004e84 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8117 	beq.w	8004b98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800496a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800497a:	4b85      	ldr	r3, [pc, #532]	; (8004b90 <HAL_UART_IRQHandler+0x298>)
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 810a 	beq.w	8004b98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d011      	beq.n	80049b4 <HAL_UART_IRQHandler+0xbc>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2201      	movs	r2, #1
 80049a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d011      	beq.n	80049e4 <HAL_UART_IRQHandler+0xec>
 80049c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2202      	movs	r2, #2
 80049d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <HAL_UART_IRQHandler+0x11c>
 80049f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2204      	movs	r2, #4
 8004a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d017      	beq.n	8004a50 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a30:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	f043 0208 	orr.w	r2, r3, #8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d012      	beq.n	8004a82 <HAL_UART_IRQHandler+0x18a>
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 81fd 	beq.w	8004e88 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00d      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d005      	beq.n	8004ada <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ad2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04f      	beq.n	8004b7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fedc 	bl	8005898 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d141      	bne.n	8004b72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3308      	adds	r3, #8
 8004af4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1d9      	bne.n	8004aee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d013      	beq.n	8004b6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b46:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <HAL_UART_IRQHandler+0x29c>)
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe f896 	bl	8002c80 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b64:	4610      	mov	r0, r2
 8004b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	e00f      	b.n	8004b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9b4 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00b      	b.n	8004b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9b0 	bl	8004ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e007      	b.n	8004b8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9ac 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004b88:	e17e      	b.n	8004e88 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8a:	bf00      	nop
    return;
 8004b8c:	e17c      	b.n	8004e88 <HAL_UART_IRQHandler+0x590>
 8004b8e:	bf00      	nop
 8004b90:	04000120 	.word	0x04000120
 8004b94:	08005b45 	.word	0x08005b45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	f040 814c 	bne.w	8004e3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8145 	beq.w	8004e3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 813e 	beq.w	8004e3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	f040 80b6 	bne.w	8004d42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8150 	beq.w	8004e8c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	f080 8148 	bcs.w	8004e8c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c10:	f000 8086 	beq.w	8004d20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c20:	e853 3f00 	ldrex	r3, [r3]
 8004c24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1da      	bne.n	8004c14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3308      	adds	r3, #8
 8004cba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e3      	bne.n	8004c9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf0:	f023 0310 	bic.w	r3, r3, #16
 8004cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e4      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fd ff40 	bl	8002ba0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f8d6 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d40:	e0a4      	b.n	8004e8c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 8096 	beq.w	8004e90 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8091 	beq.w	8004e90 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d90:	647b      	str	r3, [r7, #68]	; 0x44
 8004d92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e4      	bne.n	8004d6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	623b      	str	r3, [r7, #32]
   return(result);
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dc8:	633a      	str	r2, [r7, #48]	; 0x30
 8004dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e3      	bne.n	8004da4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 0310 	bic.w	r3, r3, #16
 8004e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	69b9      	ldr	r1, [r7, #24]
 8004e18:	69fa      	ldr	r2, [r7, #28]
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e4      	bne.n	8004df0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f85a 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e38:	e02a      	b.n	8004e90 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00e      	beq.n	8004e64 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01c      	beq.n	8004e94 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
    }
    return;
 8004e62:	e017      	b.n	8004e94 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <HAL_UART_IRQHandler+0x59e>
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fe77 	bl	8005b70 <UART_EndTransmit_IT>
    return;
 8004e82:	e008      	b.n	8004e96 <HAL_UART_IRQHandler+0x59e>
      return;
 8004e84:	bf00      	nop
 8004e86:	e006      	b.n	8004e96 <HAL_UART_IRQHandler+0x59e>
    return;
 8004e88:	bf00      	nop
 8004e8a:	e004      	b.n	8004e96 <HAL_UART_IRQHandler+0x59e>
      return;
 8004e8c:	bf00      	nop
 8004e8e:	e002      	b.n	8004e96 <HAL_UART_IRQHandler+0x59e>
      return;
 8004e90:	bf00      	nop
 8004e92:	e000      	b.n	8004e96 <HAL_UART_IRQHandler+0x59e>
    return;
 8004e94:	bf00      	nop
  }

}
 8004e96:	37e8      	adds	r7, #232	; 0xe8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4ba6      	ldr	r3, [pc, #664]	; (80051c8 <UART_SetConfig+0x2c4>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a94      	ldr	r2, [pc, #592]	; (80051cc <UART_SetConfig+0x2c8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d120      	bne.n	8004fc2 <UART_SetConfig+0xbe>
 8004f80:	4b93      	ldr	r3, [pc, #588]	; (80051d0 <UART_SetConfig+0x2cc>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d816      	bhi.n	8004fbc <UART_SetConfig+0xb8>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x90>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb1 	.word	0x08004fb1
 8004f9c:	08004fab 	.word	0x08004fab
 8004fa0:	08004fb7 	.word	0x08004fb7
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e150      	b.n	800524c <UART_SetConfig+0x348>
 8004faa:	2302      	movs	r3, #2
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e14d      	b.n	800524c <UART_SetConfig+0x348>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e14a      	b.n	800524c <UART_SetConfig+0x348>
 8004fb6:	2308      	movs	r3, #8
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e147      	b.n	800524c <UART_SetConfig+0x348>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e144      	b.n	800524c <UART_SetConfig+0x348>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a83      	ldr	r2, [pc, #524]	; (80051d4 <UART_SetConfig+0x2d0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d132      	bne.n	8005032 <UART_SetConfig+0x12e>
 8004fcc:	4b80      	ldr	r3, [pc, #512]	; (80051d0 <UART_SetConfig+0x2cc>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f003 030c 	and.w	r3, r3, #12
 8004fd6:	2b0c      	cmp	r3, #12
 8004fd8:	d828      	bhi.n	800502c <UART_SetConfig+0x128>
 8004fda:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0xdc>)
 8004fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe0:	08005015 	.word	0x08005015
 8004fe4:	0800502d 	.word	0x0800502d
 8004fe8:	0800502d 	.word	0x0800502d
 8004fec:	0800502d 	.word	0x0800502d
 8004ff0:	08005021 	.word	0x08005021
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	0800501b 	.word	0x0800501b
 8005004:	0800502d 	.word	0x0800502d
 8005008:	0800502d 	.word	0x0800502d
 800500c:	0800502d 	.word	0x0800502d
 8005010:	08005027 	.word	0x08005027
 8005014:	2300      	movs	r3, #0
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e118      	b.n	800524c <UART_SetConfig+0x348>
 800501a:	2302      	movs	r3, #2
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e115      	b.n	800524c <UART_SetConfig+0x348>
 8005020:	2304      	movs	r3, #4
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e112      	b.n	800524c <UART_SetConfig+0x348>
 8005026:	2308      	movs	r3, #8
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e10f      	b.n	800524c <UART_SetConfig+0x348>
 800502c:	2310      	movs	r3, #16
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e10c      	b.n	800524c <UART_SetConfig+0x348>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a68      	ldr	r2, [pc, #416]	; (80051d8 <UART_SetConfig+0x2d4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d120      	bne.n	800507e <UART_SetConfig+0x17a>
 800503c:	4b64      	ldr	r3, [pc, #400]	; (80051d0 <UART_SetConfig+0x2cc>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005046:	2b30      	cmp	r3, #48	; 0x30
 8005048:	d013      	beq.n	8005072 <UART_SetConfig+0x16e>
 800504a:	2b30      	cmp	r3, #48	; 0x30
 800504c:	d814      	bhi.n	8005078 <UART_SetConfig+0x174>
 800504e:	2b20      	cmp	r3, #32
 8005050:	d009      	beq.n	8005066 <UART_SetConfig+0x162>
 8005052:	2b20      	cmp	r3, #32
 8005054:	d810      	bhi.n	8005078 <UART_SetConfig+0x174>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <UART_SetConfig+0x15c>
 800505a:	2b10      	cmp	r3, #16
 800505c:	d006      	beq.n	800506c <UART_SetConfig+0x168>
 800505e:	e00b      	b.n	8005078 <UART_SetConfig+0x174>
 8005060:	2300      	movs	r3, #0
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e0f2      	b.n	800524c <UART_SetConfig+0x348>
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e0ef      	b.n	800524c <UART_SetConfig+0x348>
 800506c:	2304      	movs	r3, #4
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e0ec      	b.n	800524c <UART_SetConfig+0x348>
 8005072:	2308      	movs	r3, #8
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e0e9      	b.n	800524c <UART_SetConfig+0x348>
 8005078:	2310      	movs	r3, #16
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	e0e6      	b.n	800524c <UART_SetConfig+0x348>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a56      	ldr	r2, [pc, #344]	; (80051dc <UART_SetConfig+0x2d8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d120      	bne.n	80050ca <UART_SetConfig+0x1c6>
 8005088:	4b51      	ldr	r3, [pc, #324]	; (80051d0 <UART_SetConfig+0x2cc>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005092:	2bc0      	cmp	r3, #192	; 0xc0
 8005094:	d013      	beq.n	80050be <UART_SetConfig+0x1ba>
 8005096:	2bc0      	cmp	r3, #192	; 0xc0
 8005098:	d814      	bhi.n	80050c4 <UART_SetConfig+0x1c0>
 800509a:	2b80      	cmp	r3, #128	; 0x80
 800509c:	d009      	beq.n	80050b2 <UART_SetConfig+0x1ae>
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d810      	bhi.n	80050c4 <UART_SetConfig+0x1c0>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <UART_SetConfig+0x1a8>
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d006      	beq.n	80050b8 <UART_SetConfig+0x1b4>
 80050aa:	e00b      	b.n	80050c4 <UART_SetConfig+0x1c0>
 80050ac:	2300      	movs	r3, #0
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e0cc      	b.n	800524c <UART_SetConfig+0x348>
 80050b2:	2302      	movs	r3, #2
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e0c9      	b.n	800524c <UART_SetConfig+0x348>
 80050b8:	2304      	movs	r3, #4
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e0c6      	b.n	800524c <UART_SetConfig+0x348>
 80050be:	2308      	movs	r3, #8
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e0c3      	b.n	800524c <UART_SetConfig+0x348>
 80050c4:	2310      	movs	r3, #16
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e0c0      	b.n	800524c <UART_SetConfig+0x348>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <UART_SetConfig+0x2dc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d125      	bne.n	8005120 <UART_SetConfig+0x21c>
 80050d4:	4b3e      	ldr	r3, [pc, #248]	; (80051d0 <UART_SetConfig+0x2cc>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e2:	d017      	beq.n	8005114 <UART_SetConfig+0x210>
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050e8:	d817      	bhi.n	800511a <UART_SetConfig+0x216>
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	d00b      	beq.n	8005108 <UART_SetConfig+0x204>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d811      	bhi.n	800511a <UART_SetConfig+0x216>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <UART_SetConfig+0x1fe>
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fe:	d006      	beq.n	800510e <UART_SetConfig+0x20a>
 8005100:	e00b      	b.n	800511a <UART_SetConfig+0x216>
 8005102:	2300      	movs	r3, #0
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e0a1      	b.n	800524c <UART_SetConfig+0x348>
 8005108:	2302      	movs	r3, #2
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e09e      	b.n	800524c <UART_SetConfig+0x348>
 800510e:	2304      	movs	r3, #4
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e09b      	b.n	800524c <UART_SetConfig+0x348>
 8005114:	2308      	movs	r3, #8
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e098      	b.n	800524c <UART_SetConfig+0x348>
 800511a:	2310      	movs	r3, #16
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e095      	b.n	800524c <UART_SetConfig+0x348>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2f      	ldr	r2, [pc, #188]	; (80051e4 <UART_SetConfig+0x2e0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d125      	bne.n	8005176 <UART_SetConfig+0x272>
 800512a:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <UART_SetConfig+0x2cc>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005130:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005138:	d017      	beq.n	800516a <UART_SetConfig+0x266>
 800513a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800513e:	d817      	bhi.n	8005170 <UART_SetConfig+0x26c>
 8005140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005144:	d00b      	beq.n	800515e <UART_SetConfig+0x25a>
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	d811      	bhi.n	8005170 <UART_SetConfig+0x26c>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <UART_SetConfig+0x254>
 8005150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005154:	d006      	beq.n	8005164 <UART_SetConfig+0x260>
 8005156:	e00b      	b.n	8005170 <UART_SetConfig+0x26c>
 8005158:	2301      	movs	r3, #1
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	e076      	b.n	800524c <UART_SetConfig+0x348>
 800515e:	2302      	movs	r3, #2
 8005160:	77fb      	strb	r3, [r7, #31]
 8005162:	e073      	b.n	800524c <UART_SetConfig+0x348>
 8005164:	2304      	movs	r3, #4
 8005166:	77fb      	strb	r3, [r7, #31]
 8005168:	e070      	b.n	800524c <UART_SetConfig+0x348>
 800516a:	2308      	movs	r3, #8
 800516c:	77fb      	strb	r3, [r7, #31]
 800516e:	e06d      	b.n	800524c <UART_SetConfig+0x348>
 8005170:	2310      	movs	r3, #16
 8005172:	77fb      	strb	r3, [r7, #31]
 8005174:	e06a      	b.n	800524c <UART_SetConfig+0x348>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <UART_SetConfig+0x2e4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d138      	bne.n	80051f2 <UART_SetConfig+0x2ee>
 8005180:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <UART_SetConfig+0x2cc>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005186:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800518a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800518e:	d017      	beq.n	80051c0 <UART_SetConfig+0x2bc>
 8005190:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005194:	d82a      	bhi.n	80051ec <UART_SetConfig+0x2e8>
 8005196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519a:	d00b      	beq.n	80051b4 <UART_SetConfig+0x2b0>
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d824      	bhi.n	80051ec <UART_SetConfig+0x2e8>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <UART_SetConfig+0x2aa>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d006      	beq.n	80051ba <UART_SetConfig+0x2b6>
 80051ac:	e01e      	b.n	80051ec <UART_SetConfig+0x2e8>
 80051ae:	2300      	movs	r3, #0
 80051b0:	77fb      	strb	r3, [r7, #31]
 80051b2:	e04b      	b.n	800524c <UART_SetConfig+0x348>
 80051b4:	2302      	movs	r3, #2
 80051b6:	77fb      	strb	r3, [r7, #31]
 80051b8:	e048      	b.n	800524c <UART_SetConfig+0x348>
 80051ba:	2304      	movs	r3, #4
 80051bc:	77fb      	strb	r3, [r7, #31]
 80051be:	e045      	b.n	800524c <UART_SetConfig+0x348>
 80051c0:	2308      	movs	r3, #8
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e042      	b.n	800524c <UART_SetConfig+0x348>
 80051c6:	bf00      	nop
 80051c8:	efff69f3 	.word	0xefff69f3
 80051cc:	40011000 	.word	0x40011000
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40004400 	.word	0x40004400
 80051d8:	40004800 	.word	0x40004800
 80051dc:	40004c00 	.word	0x40004c00
 80051e0:	40005000 	.word	0x40005000
 80051e4:	40011400 	.word	0x40011400
 80051e8:	40007800 	.word	0x40007800
 80051ec:	2310      	movs	r3, #16
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e02c      	b.n	800524c <UART_SetConfig+0x348>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a72      	ldr	r2, [pc, #456]	; (80053c0 <UART_SetConfig+0x4bc>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d125      	bne.n	8005248 <UART_SetConfig+0x344>
 80051fc:	4b71      	ldr	r3, [pc, #452]	; (80053c4 <UART_SetConfig+0x4c0>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005206:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800520a:	d017      	beq.n	800523c <UART_SetConfig+0x338>
 800520c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005210:	d817      	bhi.n	8005242 <UART_SetConfig+0x33e>
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005216:	d00b      	beq.n	8005230 <UART_SetConfig+0x32c>
 8005218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521c:	d811      	bhi.n	8005242 <UART_SetConfig+0x33e>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <UART_SetConfig+0x326>
 8005222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005226:	d006      	beq.n	8005236 <UART_SetConfig+0x332>
 8005228:	e00b      	b.n	8005242 <UART_SetConfig+0x33e>
 800522a:	2300      	movs	r3, #0
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e00d      	b.n	800524c <UART_SetConfig+0x348>
 8005230:	2302      	movs	r3, #2
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e00a      	b.n	800524c <UART_SetConfig+0x348>
 8005236:	2304      	movs	r3, #4
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e007      	b.n	800524c <UART_SetConfig+0x348>
 800523c:	2308      	movs	r3, #8
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e004      	b.n	800524c <UART_SetConfig+0x348>
 8005242:	2310      	movs	r3, #16
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e001      	b.n	800524c <UART_SetConfig+0x348>
 8005248:	2310      	movs	r3, #16
 800524a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005254:	d15b      	bne.n	800530e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005256:	7ffb      	ldrb	r3, [r7, #31]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d828      	bhi.n	80052ae <UART_SetConfig+0x3aa>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <UART_SetConfig+0x360>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005289 	.word	0x08005289
 8005268:	08005291 	.word	0x08005291
 800526c:	08005299 	.word	0x08005299
 8005270:	080052af 	.word	0x080052af
 8005274:	0800529f 	.word	0x0800529f
 8005278:	080052af 	.word	0x080052af
 800527c:	080052af 	.word	0x080052af
 8005280:	080052af 	.word	0x080052af
 8005284:	080052a7 	.word	0x080052a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fe fe08 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 800528c:	61b8      	str	r0, [r7, #24]
        break;
 800528e:	e013      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005290:	f7fe fe18 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8005294:	61b8      	str	r0, [r7, #24]
        break;
 8005296:	e00f      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005298:	4b4b      	ldr	r3, [pc, #300]	; (80053c8 <UART_SetConfig+0x4c4>)
 800529a:	61bb      	str	r3, [r7, #24]
        break;
 800529c:	e00c      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800529e:	f7fe fceb 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 80052a2:	61b8      	str	r0, [r7, #24]
        break;
 80052a4:	e008      	b.n	80052b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052aa:	61bb      	str	r3, [r7, #24]
        break;
 80052ac:	e004      	b.n	80052b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	77bb      	strb	r3, [r7, #30]
        break;
 80052b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d074      	beq.n	80053a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	005a      	lsls	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	441a      	add	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d916      	bls.n	8005308 <UART_SetConfig+0x404>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d212      	bcs.n	8005308 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f023 030f 	bic.w	r3, r3, #15
 80052ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	89fa      	ldrh	r2, [r7, #14]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e04f      	b.n	80053a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77bb      	strb	r3, [r7, #30]
 800530c:	e04c      	b.n	80053a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530e:	7ffb      	ldrb	r3, [r7, #31]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d828      	bhi.n	8005366 <UART_SetConfig+0x462>
 8005314:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0x418>)
 8005316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531a:	bf00      	nop
 800531c:	08005341 	.word	0x08005341
 8005320:	08005349 	.word	0x08005349
 8005324:	08005351 	.word	0x08005351
 8005328:	08005367 	.word	0x08005367
 800532c:	08005357 	.word	0x08005357
 8005330:	08005367 	.word	0x08005367
 8005334:	08005367 	.word	0x08005367
 8005338:	08005367 	.word	0x08005367
 800533c:	0800535f 	.word	0x0800535f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005340:	f7fe fdac 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8005344:	61b8      	str	r0, [r7, #24]
        break;
 8005346:	e013      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005348:	f7fe fdbc 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 800534c:	61b8      	str	r0, [r7, #24]
        break;
 800534e:	e00f      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <UART_SetConfig+0x4c4>)
 8005352:	61bb      	str	r3, [r7, #24]
        break;
 8005354:	e00c      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005356:	f7fe fc8f 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 800535a:	61b8      	str	r0, [r7, #24]
        break;
 800535c:	e008      	b.n	8005370 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	61bb      	str	r3, [r7, #24]
        break;
 8005364:	e004      	b.n	8005370 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	77bb      	strb	r3, [r7, #30]
        break;
 800536e:	bf00      	nop
    }

    if (pclk != 0U)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	085a      	lsrs	r2, r3, #1
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d909      	bls.n	80053a4 <UART_SetConfig+0x4a0>
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005396:	d205      	bcs.n	80053a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60da      	str	r2, [r3, #12]
 80053a2:	e001      	b.n	80053a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40007c00 	.word	0x40007c00
 80053c4:	40023800 	.word	0x40023800
 80053c8:	00f42400 	.word	0x00f42400

080053cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00a      	beq.n	80053f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00a      	beq.n	800543a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01a      	beq.n	80054e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ca:	d10a      	bne.n	80054e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005520:	f7fc fcf4 	bl	8001f0c <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	2b08      	cmp	r3, #8
 8005532:	d10e      	bne.n	8005552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f81b 	bl	800557e <UART_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e011      	b.n	8005576 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b09c      	sub	sp, #112	; 0x70
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4613      	mov	r3, r2
 800558c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	e0a7      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005596:	f000 80a3 	beq.w	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559a:	f7fc fcb7 	bl	8001f0c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80055aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d13f      	bne.n	8005630 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	e853 3f00 	ldrex	r3, [r3]
 80055bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055c4:	667b      	str	r3, [r7, #100]	; 0x64
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e6      	bne.n	80055b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005602:	64ba      	str	r2, [r7, #72]	; 0x48
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e068      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d050      	beq.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d148      	bne.n	80056e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005656:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800566c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
 8005678:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	613b      	str	r3, [r7, #16]
   return(result);
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056aa:	623a      	str	r2, [r7, #32]
 80056ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	69f9      	ldr	r1, [r7, #28]
 80056b0:	6a3a      	ldr	r2, [r7, #32]
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e5      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e010      	b.n	8005702 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69da      	ldr	r2, [r3, #28]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f43f af48 	beq.w	8005590 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3770      	adds	r7, #112	; 0x70
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b096      	sub	sp, #88	; 0x58
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	4613      	mov	r3, r2
 8005718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2222      	movs	r2, #34	; 0x22
 8005734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573c:	2b00      	cmp	r3, #0
 800573e:	d028      	beq.n	8005792 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005744:	4a3e      	ldr	r2, [pc, #248]	; (8005840 <UART_Start_Receive_DMA+0x134>)
 8005746:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574c:	4a3d      	ldr	r2, [pc, #244]	; (8005844 <UART_Start_Receive_DMA+0x138>)
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005754:	4a3c      	ldr	r2, [pc, #240]	; (8005848 <UART_Start_Receive_DMA+0x13c>)
 8005756:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575c:	2200      	movs	r2, #0
 800575e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3324      	adds	r3, #36	; 0x24
 800576a:	4619      	mov	r1, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	461a      	mov	r2, r3
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	f7fd f9b4 	bl	8002ae0 <HAL_DMA_Start_IT>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2210      	movs	r2, #16
 8005782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e051      	b.n	8005836 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d018      	beq.n	80057cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ae:	657b      	str	r3, [r7, #84]	; 0x54
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	653b      	str	r3, [r7, #80]	; 0x50
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057ec:	637a      	str	r2, [r7, #52]	; 0x34
 80057ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3308      	adds	r3, #8
 8005806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3308      	adds	r3, #8
 800581e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005820:	623a      	str	r2, [r7, #32]
 8005822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	61bb      	str	r3, [r7, #24]
   return(result);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e5      	bne.n	8005800 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3758      	adds	r7, #88	; 0x58
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	08005961 	.word	0x08005961
 8005844:	08005a89 	.word	0x08005a89
 8005848:	08005ac7 	.word	0x08005ac7

0800584c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b089      	sub	sp, #36	; 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	60bb      	str	r3, [r7, #8]
   return(result);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6979      	ldr	r1, [r7, #20]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	613b      	str	r3, [r7, #16]
   return(result);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e6      	bne.n	8005854 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800588c:	bf00      	nop
 800588e:	3724      	adds	r7, #36	; 0x24
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b095      	sub	sp, #84	; 0x54
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	643b      	str	r3, [r7, #64]	; 0x40
 80058c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1e6      	bne.n	80058a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3308      	adds	r3, #8
 80058d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e5      	bne.n	80058d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590a:	2b01      	cmp	r3, #1
 800590c:	d118      	bne.n	8005940 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	e853 3f00 	ldrex	r3, [r3]
 800591a:	60bb      	str	r3, [r7, #8]
   return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0310 	bic.w	r3, r3, #16
 8005922:	647b      	str	r3, [r7, #68]	; 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005930:	6979      	ldr	r1, [r7, #20]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	e841 2300 	strex	r3, r2, [r1]
 8005938:	613b      	str	r3, [r7, #16]
   return(result);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1e6      	bne.n	800590e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005954:	bf00      	nop
 8005956:	3754      	adds	r7, #84	; 0x54
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b09c      	sub	sp, #112	; 0x70
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005976:	d071      	beq.n	8005a5c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8005978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800598e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005994:	66bb      	str	r3, [r7, #104]	; 0x68
 8005996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800599e:	65bb      	str	r3, [r7, #88]	; 0x58
 80059a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e6      	bne.n	8005980 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	667b      	str	r3, [r7, #100]	; 0x64
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059d2:	647a      	str	r2, [r7, #68]	; 0x44
 80059d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059da:	e841 2300 	strex	r3, r2, [r1]
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1e5      	bne.n	80059b2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3308      	adds	r3, #8
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	623b      	str	r3, [r7, #32]
   return(result);
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fc:	663b      	str	r3, [r7, #96]	; 0x60
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3308      	adds	r3, #8
 8005a04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a06:	633a      	str	r2, [r7, #48]	; 0x30
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e5      	bne.n	80059e6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d118      	bne.n	8005a5c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0310 	bic.w	r3, r3, #16
 8005a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	69b9      	ldr	r1, [r7, #24]
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	617b      	str	r3, [r7, #20]
   return(result);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e6      	bne.n	8005a2a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5e:	2200      	movs	r2, #0
 8005a60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d107      	bne.n	8005a7a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a70:	4619      	mov	r1, r3
 8005a72:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a74:	f7ff fa3a 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a78:	e002      	b.n	8005a80 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8005a7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005a7c:	f7ff fa18 	bl	8004eb0 <HAL_UART_RxCpltCallback>
}
 8005a80:	bf00      	nop
 8005a82:	3770      	adds	r7, #112	; 0x70
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d109      	bne.n	8005ab8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fa1b 	bl	8004eec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ab6:	e002      	b.n	8005abe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fa03 	bl	8004ec4 <HAL_UART_RxHalfCpltCallback>
}
 8005abe:	bf00      	nop
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b086      	sub	sp, #24
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aec:	2b80      	cmp	r3, #128	; 0x80
 8005aee:	d109      	bne.n	8005b04 <UART_DMAError+0x3e>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b21      	cmp	r3, #33	; 0x21
 8005af4:	d106      	bne.n	8005b04 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005afe:	6978      	ldr	r0, [r7, #20]
 8005b00:	f7ff fea4 	bl	800584c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d109      	bne.n	8005b26 <UART_DMAError+0x60>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b22      	cmp	r3, #34	; 0x22
 8005b16:	d106      	bne.n	8005b26 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005b20:	6978      	ldr	r0, [r7, #20]
 8005b22:	f7ff feb9 	bl	8005898 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	f043 0210 	orr.w	r2, r3, #16
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff f9ce 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3c:	bf00      	nop
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f7ff f9b8 	bl	8004ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	e853 3f00 	ldrex	r3, [r3]
 8005b84:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8c:	61fb      	str	r3, [r7, #28]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6979      	ldr	r1, [r7, #20]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e6      	bne.n	8005b78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff f970 	bl	8004e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bbc:	bf00      	nop
 8005bbe:	3720      	adds	r7, #32
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <__errno>:
 8005bc4:	4b01      	ldr	r3, [pc, #4]	; (8005bcc <__errno+0x8>)
 8005bc6:	6818      	ldr	r0, [r3, #0]
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	2000000c 	.word	0x2000000c

08005bd0 <__sflush_r>:
 8005bd0:	898a      	ldrh	r2, [r1, #12]
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	0710      	lsls	r0, r2, #28
 8005bda:	460c      	mov	r4, r1
 8005bdc:	d458      	bmi.n	8005c90 <__sflush_r+0xc0>
 8005bde:	684b      	ldr	r3, [r1, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dc05      	bgt.n	8005bf0 <__sflush_r+0x20>
 8005be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dc02      	bgt.n	8005bf0 <__sflush_r+0x20>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d0f9      	beq.n	8005bea <__sflush_r+0x1a>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bfc:	682f      	ldr	r7, [r5, #0]
 8005bfe:	602b      	str	r3, [r5, #0]
 8005c00:	d032      	beq.n	8005c68 <__sflush_r+0x98>
 8005c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	075a      	lsls	r2, r3, #29
 8005c08:	d505      	bpl.n	8005c16 <__sflush_r+0x46>
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	1ac0      	subs	r0, r0, r3
 8005c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c10:	b10b      	cbz	r3, 8005c16 <__sflush_r+0x46>
 8005c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c14:	1ac0      	subs	r0, r0, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c1c:	6a21      	ldr	r1, [r4, #32]
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b0      	blx	r6
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	d106      	bne.n	8005c36 <__sflush_r+0x66>
 8005c28:	6829      	ldr	r1, [r5, #0]
 8005c2a:	291d      	cmp	r1, #29
 8005c2c:	d82c      	bhi.n	8005c88 <__sflush_r+0xb8>
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <__sflush_r+0x108>)
 8005c30:	40ca      	lsrs	r2, r1
 8005c32:	07d6      	lsls	r6, r2, #31
 8005c34:	d528      	bpl.n	8005c88 <__sflush_r+0xb8>
 8005c36:	2200      	movs	r2, #0
 8005c38:	6062      	str	r2, [r4, #4]
 8005c3a:	04d9      	lsls	r1, r3, #19
 8005c3c:	6922      	ldr	r2, [r4, #16]
 8005c3e:	6022      	str	r2, [r4, #0]
 8005c40:	d504      	bpl.n	8005c4c <__sflush_r+0x7c>
 8005c42:	1c42      	adds	r2, r0, #1
 8005c44:	d101      	bne.n	8005c4a <__sflush_r+0x7a>
 8005c46:	682b      	ldr	r3, [r5, #0]
 8005c48:	b903      	cbnz	r3, 8005c4c <__sflush_r+0x7c>
 8005c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c4e:	602f      	str	r7, [r5, #0]
 8005c50:	2900      	cmp	r1, #0
 8005c52:	d0ca      	beq.n	8005bea <__sflush_r+0x1a>
 8005c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	d002      	beq.n	8005c62 <__sflush_r+0x92>
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f000 f9b1 	bl	8005fc4 <_free_r>
 8005c62:	2000      	movs	r0, #0
 8005c64:	6360      	str	r0, [r4, #52]	; 0x34
 8005c66:	e7c1      	b.n	8005bec <__sflush_r+0x1c>
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b0      	blx	r6
 8005c70:	1c41      	adds	r1, r0, #1
 8005c72:	d1c7      	bne.n	8005c04 <__sflush_r+0x34>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0c4      	beq.n	8005c04 <__sflush_r+0x34>
 8005c7a:	2b1d      	cmp	r3, #29
 8005c7c:	d001      	beq.n	8005c82 <__sflush_r+0xb2>
 8005c7e:	2b16      	cmp	r3, #22
 8005c80:	d101      	bne.n	8005c86 <__sflush_r+0xb6>
 8005c82:	602f      	str	r7, [r5, #0]
 8005c84:	e7b1      	b.n	8005bea <__sflush_r+0x1a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	e7ad      	b.n	8005bec <__sflush_r+0x1c>
 8005c90:	690f      	ldr	r7, [r1, #16]
 8005c92:	2f00      	cmp	r7, #0
 8005c94:	d0a9      	beq.n	8005bea <__sflush_r+0x1a>
 8005c96:	0793      	lsls	r3, r2, #30
 8005c98:	680e      	ldr	r6, [r1, #0]
 8005c9a:	bf08      	it	eq
 8005c9c:	694b      	ldreq	r3, [r1, #20]
 8005c9e:	600f      	str	r7, [r1, #0]
 8005ca0:	bf18      	it	ne
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	eba6 0807 	sub.w	r8, r6, r7
 8005ca8:	608b      	str	r3, [r1, #8]
 8005caa:	f1b8 0f00 	cmp.w	r8, #0
 8005cae:	dd9c      	ble.n	8005bea <__sflush_r+0x1a>
 8005cb0:	6a21      	ldr	r1, [r4, #32]
 8005cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	463a      	mov	r2, r7
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	dc06      	bgt.n	8005cce <__sflush_r+0xfe>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc6:	81a3      	strh	r3, [r4, #12]
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ccc:	e78e      	b.n	8005bec <__sflush_r+0x1c>
 8005cce:	4407      	add	r7, r0
 8005cd0:	eba8 0800 	sub.w	r8, r8, r0
 8005cd4:	e7e9      	b.n	8005caa <__sflush_r+0xda>
 8005cd6:	bf00      	nop
 8005cd8:	20400001 	.word	0x20400001

08005cdc <_fflush_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	b913      	cbnz	r3, 8005cec <_fflush_r+0x10>
 8005ce6:	2500      	movs	r5, #0
 8005ce8:	4628      	mov	r0, r5
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	b118      	cbz	r0, 8005cf6 <_fflush_r+0x1a>
 8005cee:	6983      	ldr	r3, [r0, #24]
 8005cf0:	b90b      	cbnz	r3, 8005cf6 <_fflush_r+0x1a>
 8005cf2:	f000 f899 	bl	8005e28 <__sinit>
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <_fflush_r+0x6c>)
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	d11b      	bne.n	8005d34 <_fflush_r+0x58>
 8005cfc:	686c      	ldr	r4, [r5, #4]
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0ef      	beq.n	8005ce6 <_fflush_r+0xa>
 8005d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d08:	07d0      	lsls	r0, r2, #31
 8005d0a:	d404      	bmi.n	8005d16 <_fflush_r+0x3a>
 8005d0c:	0599      	lsls	r1, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_fflush_r+0x3a>
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d12:	f000 f94c 	bl	8005fae <__retarget_lock_acquire_recursive>
 8005d16:	4628      	mov	r0, r5
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f7ff ff59 	bl	8005bd0 <__sflush_r>
 8005d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d20:	07da      	lsls	r2, r3, #31
 8005d22:	4605      	mov	r5, r0
 8005d24:	d4e0      	bmi.n	8005ce8 <_fflush_r+0xc>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	059b      	lsls	r3, r3, #22
 8005d2a:	d4dd      	bmi.n	8005ce8 <_fflush_r+0xc>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d2e:	f000 f93f 	bl	8005fb0 <__retarget_lock_release_recursive>
 8005d32:	e7d9      	b.n	8005ce8 <_fflush_r+0xc>
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <_fflush_r+0x70>)
 8005d36:	429c      	cmp	r4, r3
 8005d38:	d101      	bne.n	8005d3e <_fflush_r+0x62>
 8005d3a:	68ac      	ldr	r4, [r5, #8]
 8005d3c:	e7df      	b.n	8005cfe <_fflush_r+0x22>
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <_fflush_r+0x74>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	bf08      	it	eq
 8005d44:	68ec      	ldreq	r4, [r5, #12]
 8005d46:	e7da      	b.n	8005cfe <_fflush_r+0x22>
 8005d48:	08006c88 	.word	0x08006c88
 8005d4c:	08006ca8 	.word	0x08006ca8
 8005d50:	08006c68 	.word	0x08006c68

08005d54 <fflush>:
 8005d54:	4601      	mov	r1, r0
 8005d56:	b920      	cbnz	r0, 8005d62 <fflush+0xe>
 8005d58:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <fflush+0x18>)
 8005d5a:	4905      	ldr	r1, [pc, #20]	; (8005d70 <fflush+0x1c>)
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	f000 b8e1 	b.w	8005f24 <_fwalk_reent>
 8005d62:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <fflush+0x20>)
 8005d64:	6818      	ldr	r0, [r3, #0]
 8005d66:	f7ff bfb9 	b.w	8005cdc <_fflush_r>
 8005d6a:	bf00      	nop
 8005d6c:	08006cc8 	.word	0x08006cc8
 8005d70:	08005cdd 	.word	0x08005cdd
 8005d74:	2000000c 	.word	0x2000000c

08005d78 <std>:
 8005d78:	2300      	movs	r3, #0
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d86:	6083      	str	r3, [r0, #8]
 8005d88:	8181      	strh	r1, [r0, #12]
 8005d8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005d8c:	81c2      	strh	r2, [r0, #14]
 8005d8e:	6183      	str	r3, [r0, #24]
 8005d90:	4619      	mov	r1, r3
 8005d92:	2208      	movs	r2, #8
 8005d94:	305c      	adds	r0, #92	; 0x5c
 8005d96:	f000 f90c 	bl	8005fb2 <memset>
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <std+0x38>)
 8005d9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <std+0x3c>)
 8005da0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005da2:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <std+0x40>)
 8005da4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <std+0x44>)
 8005da8:	6224      	str	r4, [r4, #32]
 8005daa:	6323      	str	r3, [r4, #48]	; 0x30
 8005dac:	bd10      	pop	{r4, pc}
 8005dae:	bf00      	nop
 8005db0:	080061d5 	.word	0x080061d5
 8005db4:	080061f7 	.word	0x080061f7
 8005db8:	0800622f 	.word	0x0800622f
 8005dbc:	08006253 	.word	0x08006253

08005dc0 <_cleanup_r>:
 8005dc0:	4901      	ldr	r1, [pc, #4]	; (8005dc8 <_cleanup_r+0x8>)
 8005dc2:	f000 b8af 	b.w	8005f24 <_fwalk_reent>
 8005dc6:	bf00      	nop
 8005dc8:	08005cdd 	.word	0x08005cdd

08005dcc <__sfmoreglue>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	2268      	movs	r2, #104	; 0x68
 8005dd0:	1e4d      	subs	r5, r1, #1
 8005dd2:	4355      	muls	r5, r2
 8005dd4:	460e      	mov	r6, r1
 8005dd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dda:	f000 f95f 	bl	800609c <_malloc_r>
 8005dde:	4604      	mov	r4, r0
 8005de0:	b140      	cbz	r0, 8005df4 <__sfmoreglue+0x28>
 8005de2:	2100      	movs	r1, #0
 8005de4:	e9c0 1600 	strd	r1, r6, [r0]
 8005de8:	300c      	adds	r0, #12
 8005dea:	60a0      	str	r0, [r4, #8]
 8005dec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005df0:	f000 f8df 	bl	8005fb2 <memset>
 8005df4:	4620      	mov	r0, r4
 8005df6:	bd70      	pop	{r4, r5, r6, pc}

08005df8 <__sfp_lock_acquire>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__sfp_lock_acquire+0x8>)
 8005dfa:	f000 b8d8 	b.w	8005fae <__retarget_lock_acquire_recursive>
 8005dfe:	bf00      	nop
 8005e00:	200003d5 	.word	0x200003d5

08005e04 <__sfp_lock_release>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__sfp_lock_release+0x8>)
 8005e06:	f000 b8d3 	b.w	8005fb0 <__retarget_lock_release_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	200003d5 	.word	0x200003d5

08005e10 <__sinit_lock_acquire>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__sinit_lock_acquire+0x8>)
 8005e12:	f000 b8cc 	b.w	8005fae <__retarget_lock_acquire_recursive>
 8005e16:	bf00      	nop
 8005e18:	200003d6 	.word	0x200003d6

08005e1c <__sinit_lock_release>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__sinit_lock_release+0x8>)
 8005e1e:	f000 b8c7 	b.w	8005fb0 <__retarget_lock_release_recursive>
 8005e22:	bf00      	nop
 8005e24:	200003d6 	.word	0x200003d6

08005e28 <__sinit>:
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	f7ff fff0 	bl	8005e10 <__sinit_lock_acquire>
 8005e30:	69a3      	ldr	r3, [r4, #24]
 8005e32:	b11b      	cbz	r3, 8005e3c <__sinit+0x14>
 8005e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e38:	f7ff bff0 	b.w	8005e1c <__sinit_lock_release>
 8005e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e40:	6523      	str	r3, [r4, #80]	; 0x50
 8005e42:	4b13      	ldr	r3, [pc, #76]	; (8005e90 <__sinit+0x68>)
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <__sinit+0x6c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e4a:	42a3      	cmp	r3, r4
 8005e4c:	bf04      	itt	eq
 8005e4e:	2301      	moveq	r3, #1
 8005e50:	61a3      	streq	r3, [r4, #24]
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 f820 	bl	8005e98 <__sfp>
 8005e58:	6060      	str	r0, [r4, #4]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 f81c 	bl	8005e98 <__sfp>
 8005e60:	60a0      	str	r0, [r4, #8]
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f818 	bl	8005e98 <__sfp>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	60e0      	str	r0, [r4, #12]
 8005e6c:	2104      	movs	r1, #4
 8005e6e:	6860      	ldr	r0, [r4, #4]
 8005e70:	f7ff ff82 	bl	8005d78 <std>
 8005e74:	68a0      	ldr	r0, [r4, #8]
 8005e76:	2201      	movs	r2, #1
 8005e78:	2109      	movs	r1, #9
 8005e7a:	f7ff ff7d 	bl	8005d78 <std>
 8005e7e:	68e0      	ldr	r0, [r4, #12]
 8005e80:	2202      	movs	r2, #2
 8005e82:	2112      	movs	r1, #18
 8005e84:	f7ff ff78 	bl	8005d78 <std>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61a3      	str	r3, [r4, #24]
 8005e8c:	e7d2      	b.n	8005e34 <__sinit+0xc>
 8005e8e:	bf00      	nop
 8005e90:	08006cc8 	.word	0x08006cc8
 8005e94:	08005dc1 	.word	0x08005dc1

08005e98 <__sfp>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	f7ff ffac 	bl	8005df8 <__sfp_lock_acquire>
 8005ea0:	4b1e      	ldr	r3, [pc, #120]	; (8005f1c <__sfp+0x84>)
 8005ea2:	681e      	ldr	r6, [r3, #0]
 8005ea4:	69b3      	ldr	r3, [r6, #24]
 8005ea6:	b913      	cbnz	r3, 8005eae <__sfp+0x16>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	f7ff ffbd 	bl	8005e28 <__sinit>
 8005eae:	3648      	adds	r6, #72	; 0x48
 8005eb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	d503      	bpl.n	8005ec0 <__sfp+0x28>
 8005eb8:	6833      	ldr	r3, [r6, #0]
 8005eba:	b30b      	cbz	r3, 8005f00 <__sfp+0x68>
 8005ebc:	6836      	ldr	r6, [r6, #0]
 8005ebe:	e7f7      	b.n	8005eb0 <__sfp+0x18>
 8005ec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ec4:	b9d5      	cbnz	r5, 8005efc <__sfp+0x64>
 8005ec6:	4b16      	ldr	r3, [pc, #88]	; (8005f20 <__sfp+0x88>)
 8005ec8:	60e3      	str	r3, [r4, #12]
 8005eca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ece:	6665      	str	r5, [r4, #100]	; 0x64
 8005ed0:	f000 f86c 	bl	8005fac <__retarget_lock_init_recursive>
 8005ed4:	f7ff ff96 	bl	8005e04 <__sfp_lock_release>
 8005ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ee0:	6025      	str	r5, [r4, #0]
 8005ee2:	61a5      	str	r5, [r4, #24]
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eec:	f000 f861 	bl	8005fb2 <memset>
 8005ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ef8:	4620      	mov	r0, r4
 8005efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005efc:	3468      	adds	r4, #104	; 0x68
 8005efe:	e7d9      	b.n	8005eb4 <__sfp+0x1c>
 8005f00:	2104      	movs	r1, #4
 8005f02:	4638      	mov	r0, r7
 8005f04:	f7ff ff62 	bl	8005dcc <__sfmoreglue>
 8005f08:	4604      	mov	r4, r0
 8005f0a:	6030      	str	r0, [r6, #0]
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d1d5      	bne.n	8005ebc <__sfp+0x24>
 8005f10:	f7ff ff78 	bl	8005e04 <__sfp_lock_release>
 8005f14:	230c      	movs	r3, #12
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	e7ee      	b.n	8005ef8 <__sfp+0x60>
 8005f1a:	bf00      	nop
 8005f1c:	08006cc8 	.word	0x08006cc8
 8005f20:	ffff0001 	.word	0xffff0001

08005f24 <_fwalk_reent>:
 8005f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f28:	4606      	mov	r6, r0
 8005f2a:	4688      	mov	r8, r1
 8005f2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f30:	2700      	movs	r7, #0
 8005f32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f36:	f1b9 0901 	subs.w	r9, r9, #1
 8005f3a:	d505      	bpl.n	8005f48 <_fwalk_reent+0x24>
 8005f3c:	6824      	ldr	r4, [r4, #0]
 8005f3e:	2c00      	cmp	r4, #0
 8005f40:	d1f7      	bne.n	8005f32 <_fwalk_reent+0xe>
 8005f42:	4638      	mov	r0, r7
 8005f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f48:	89ab      	ldrh	r3, [r5, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d907      	bls.n	8005f5e <_fwalk_reent+0x3a>
 8005f4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f52:	3301      	adds	r3, #1
 8005f54:	d003      	beq.n	8005f5e <_fwalk_reent+0x3a>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	47c0      	blx	r8
 8005f5c:	4307      	orrs	r7, r0
 8005f5e:	3568      	adds	r5, #104	; 0x68
 8005f60:	e7e9      	b.n	8005f36 <_fwalk_reent+0x12>
	...

08005f64 <__libc_init_array>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	4d0d      	ldr	r5, [pc, #52]	; (8005f9c <__libc_init_array+0x38>)
 8005f68:	4c0d      	ldr	r4, [pc, #52]	; (8005fa0 <__libc_init_array+0x3c>)
 8005f6a:	1b64      	subs	r4, r4, r5
 8005f6c:	10a4      	asrs	r4, r4, #2
 8005f6e:	2600      	movs	r6, #0
 8005f70:	42a6      	cmp	r6, r4
 8005f72:	d109      	bne.n	8005f88 <__libc_init_array+0x24>
 8005f74:	4d0b      	ldr	r5, [pc, #44]	; (8005fa4 <__libc_init_array+0x40>)
 8005f76:	4c0c      	ldr	r4, [pc, #48]	; (8005fa8 <__libc_init_array+0x44>)
 8005f78:	f000 fe3e 	bl	8006bf8 <_init>
 8005f7c:	1b64      	subs	r4, r4, r5
 8005f7e:	10a4      	asrs	r4, r4, #2
 8005f80:	2600      	movs	r6, #0
 8005f82:	42a6      	cmp	r6, r4
 8005f84:	d105      	bne.n	8005f92 <__libc_init_array+0x2e>
 8005f86:	bd70      	pop	{r4, r5, r6, pc}
 8005f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8c:	4798      	blx	r3
 8005f8e:	3601      	adds	r6, #1
 8005f90:	e7ee      	b.n	8005f70 <__libc_init_array+0xc>
 8005f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f96:	4798      	blx	r3
 8005f98:	3601      	adds	r6, #1
 8005f9a:	e7f2      	b.n	8005f82 <__libc_init_array+0x1e>
 8005f9c:	08006d08 	.word	0x08006d08
 8005fa0:	08006d08 	.word	0x08006d08
 8005fa4:	08006d08 	.word	0x08006d08
 8005fa8:	08006d0c 	.word	0x08006d0c

08005fac <__retarget_lock_init_recursive>:
 8005fac:	4770      	bx	lr

08005fae <__retarget_lock_acquire_recursive>:
 8005fae:	4770      	bx	lr

08005fb0 <__retarget_lock_release_recursive>:
 8005fb0:	4770      	bx	lr

08005fb2 <memset>:
 8005fb2:	4402      	add	r2, r0
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d100      	bne.n	8005fbc <memset+0xa>
 8005fba:	4770      	bx	lr
 8005fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8005fc0:	e7f9      	b.n	8005fb6 <memset+0x4>
	...

08005fc4 <_free_r>:
 8005fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc6:	2900      	cmp	r1, #0
 8005fc8:	d044      	beq.n	8006054 <_free_r+0x90>
 8005fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fce:	9001      	str	r0, [sp, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd6:	bfb8      	it	lt
 8005fd8:	18e4      	addlt	r4, r4, r3
 8005fda:	f000 f973 	bl	80062c4 <__malloc_lock>
 8005fde:	4a1e      	ldr	r2, [pc, #120]	; (8006058 <_free_r+0x94>)
 8005fe0:	9801      	ldr	r0, [sp, #4]
 8005fe2:	6813      	ldr	r3, [r2, #0]
 8005fe4:	b933      	cbnz	r3, 8005ff4 <_free_r+0x30>
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	6014      	str	r4, [r2, #0]
 8005fea:	b003      	add	sp, #12
 8005fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ff0:	f000 b96e 	b.w	80062d0 <__malloc_unlock>
 8005ff4:	42a3      	cmp	r3, r4
 8005ff6:	d908      	bls.n	800600a <_free_r+0x46>
 8005ff8:	6825      	ldr	r5, [r4, #0]
 8005ffa:	1961      	adds	r1, r4, r5
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	bf01      	itttt	eq
 8006000:	6819      	ldreq	r1, [r3, #0]
 8006002:	685b      	ldreq	r3, [r3, #4]
 8006004:	1949      	addeq	r1, r1, r5
 8006006:	6021      	streq	r1, [r4, #0]
 8006008:	e7ed      	b.n	8005fe6 <_free_r+0x22>
 800600a:	461a      	mov	r2, r3
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	b10b      	cbz	r3, 8006014 <_free_r+0x50>
 8006010:	42a3      	cmp	r3, r4
 8006012:	d9fa      	bls.n	800600a <_free_r+0x46>
 8006014:	6811      	ldr	r1, [r2, #0]
 8006016:	1855      	adds	r5, r2, r1
 8006018:	42a5      	cmp	r5, r4
 800601a:	d10b      	bne.n	8006034 <_free_r+0x70>
 800601c:	6824      	ldr	r4, [r4, #0]
 800601e:	4421      	add	r1, r4
 8006020:	1854      	adds	r4, r2, r1
 8006022:	42a3      	cmp	r3, r4
 8006024:	6011      	str	r1, [r2, #0]
 8006026:	d1e0      	bne.n	8005fea <_free_r+0x26>
 8006028:	681c      	ldr	r4, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	6053      	str	r3, [r2, #4]
 800602e:	4421      	add	r1, r4
 8006030:	6011      	str	r1, [r2, #0]
 8006032:	e7da      	b.n	8005fea <_free_r+0x26>
 8006034:	d902      	bls.n	800603c <_free_r+0x78>
 8006036:	230c      	movs	r3, #12
 8006038:	6003      	str	r3, [r0, #0]
 800603a:	e7d6      	b.n	8005fea <_free_r+0x26>
 800603c:	6825      	ldr	r5, [r4, #0]
 800603e:	1961      	adds	r1, r4, r5
 8006040:	428b      	cmp	r3, r1
 8006042:	bf04      	itt	eq
 8006044:	6819      	ldreq	r1, [r3, #0]
 8006046:	685b      	ldreq	r3, [r3, #4]
 8006048:	6063      	str	r3, [r4, #4]
 800604a:	bf04      	itt	eq
 800604c:	1949      	addeq	r1, r1, r5
 800604e:	6021      	streq	r1, [r4, #0]
 8006050:	6054      	str	r4, [r2, #4]
 8006052:	e7ca      	b.n	8005fea <_free_r+0x26>
 8006054:	b003      	add	sp, #12
 8006056:	bd30      	pop	{r4, r5, pc}
 8006058:	200003d8 	.word	0x200003d8

0800605c <sbrk_aligned>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4e0e      	ldr	r6, [pc, #56]	; (8006098 <sbrk_aligned+0x3c>)
 8006060:	460c      	mov	r4, r1
 8006062:	6831      	ldr	r1, [r6, #0]
 8006064:	4605      	mov	r5, r0
 8006066:	b911      	cbnz	r1, 800606e <sbrk_aligned+0x12>
 8006068:	f000 f8a4 	bl	80061b4 <_sbrk_r>
 800606c:	6030      	str	r0, [r6, #0]
 800606e:	4621      	mov	r1, r4
 8006070:	4628      	mov	r0, r5
 8006072:	f000 f89f 	bl	80061b4 <_sbrk_r>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	d00a      	beq.n	8006090 <sbrk_aligned+0x34>
 800607a:	1cc4      	adds	r4, r0, #3
 800607c:	f024 0403 	bic.w	r4, r4, #3
 8006080:	42a0      	cmp	r0, r4
 8006082:	d007      	beq.n	8006094 <sbrk_aligned+0x38>
 8006084:	1a21      	subs	r1, r4, r0
 8006086:	4628      	mov	r0, r5
 8006088:	f000 f894 	bl	80061b4 <_sbrk_r>
 800608c:	3001      	adds	r0, #1
 800608e:	d101      	bne.n	8006094 <sbrk_aligned+0x38>
 8006090:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006094:	4620      	mov	r0, r4
 8006096:	bd70      	pop	{r4, r5, r6, pc}
 8006098:	200003dc 	.word	0x200003dc

0800609c <_malloc_r>:
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	1ccd      	adds	r5, r1, #3
 80060a2:	f025 0503 	bic.w	r5, r5, #3
 80060a6:	3508      	adds	r5, #8
 80060a8:	2d0c      	cmp	r5, #12
 80060aa:	bf38      	it	cc
 80060ac:	250c      	movcc	r5, #12
 80060ae:	2d00      	cmp	r5, #0
 80060b0:	4607      	mov	r7, r0
 80060b2:	db01      	blt.n	80060b8 <_malloc_r+0x1c>
 80060b4:	42a9      	cmp	r1, r5
 80060b6:	d905      	bls.n	80060c4 <_malloc_r+0x28>
 80060b8:	230c      	movs	r3, #12
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	2600      	movs	r6, #0
 80060be:	4630      	mov	r0, r6
 80060c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c4:	4e2e      	ldr	r6, [pc, #184]	; (8006180 <_malloc_r+0xe4>)
 80060c6:	f000 f8fd 	bl	80062c4 <__malloc_lock>
 80060ca:	6833      	ldr	r3, [r6, #0]
 80060cc:	461c      	mov	r4, r3
 80060ce:	bb34      	cbnz	r4, 800611e <_malloc_r+0x82>
 80060d0:	4629      	mov	r1, r5
 80060d2:	4638      	mov	r0, r7
 80060d4:	f7ff ffc2 	bl	800605c <sbrk_aligned>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	4604      	mov	r4, r0
 80060dc:	d14d      	bne.n	800617a <_malloc_r+0xde>
 80060de:	6834      	ldr	r4, [r6, #0]
 80060e0:	4626      	mov	r6, r4
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d140      	bne.n	8006168 <_malloc_r+0xcc>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	4631      	mov	r1, r6
 80060ea:	4638      	mov	r0, r7
 80060ec:	eb04 0803 	add.w	r8, r4, r3
 80060f0:	f000 f860 	bl	80061b4 <_sbrk_r>
 80060f4:	4580      	cmp	r8, r0
 80060f6:	d13a      	bne.n	800616e <_malloc_r+0xd2>
 80060f8:	6821      	ldr	r1, [r4, #0]
 80060fa:	3503      	adds	r5, #3
 80060fc:	1a6d      	subs	r5, r5, r1
 80060fe:	f025 0503 	bic.w	r5, r5, #3
 8006102:	3508      	adds	r5, #8
 8006104:	2d0c      	cmp	r5, #12
 8006106:	bf38      	it	cc
 8006108:	250c      	movcc	r5, #12
 800610a:	4629      	mov	r1, r5
 800610c:	4638      	mov	r0, r7
 800610e:	f7ff ffa5 	bl	800605c <sbrk_aligned>
 8006112:	3001      	adds	r0, #1
 8006114:	d02b      	beq.n	800616e <_malloc_r+0xd2>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	442b      	add	r3, r5
 800611a:	6023      	str	r3, [r4, #0]
 800611c:	e00e      	b.n	800613c <_malloc_r+0xa0>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	1b52      	subs	r2, r2, r5
 8006122:	d41e      	bmi.n	8006162 <_malloc_r+0xc6>
 8006124:	2a0b      	cmp	r2, #11
 8006126:	d916      	bls.n	8006156 <_malloc_r+0xba>
 8006128:	1961      	adds	r1, r4, r5
 800612a:	42a3      	cmp	r3, r4
 800612c:	6025      	str	r5, [r4, #0]
 800612e:	bf18      	it	ne
 8006130:	6059      	strne	r1, [r3, #4]
 8006132:	6863      	ldr	r3, [r4, #4]
 8006134:	bf08      	it	eq
 8006136:	6031      	streq	r1, [r6, #0]
 8006138:	5162      	str	r2, [r4, r5]
 800613a:	604b      	str	r3, [r1, #4]
 800613c:	4638      	mov	r0, r7
 800613e:	f104 060b 	add.w	r6, r4, #11
 8006142:	f000 f8c5 	bl	80062d0 <__malloc_unlock>
 8006146:	f026 0607 	bic.w	r6, r6, #7
 800614a:	1d23      	adds	r3, r4, #4
 800614c:	1af2      	subs	r2, r6, r3
 800614e:	d0b6      	beq.n	80060be <_malloc_r+0x22>
 8006150:	1b9b      	subs	r3, r3, r6
 8006152:	50a3      	str	r3, [r4, r2]
 8006154:	e7b3      	b.n	80060be <_malloc_r+0x22>
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	42a3      	cmp	r3, r4
 800615a:	bf0c      	ite	eq
 800615c:	6032      	streq	r2, [r6, #0]
 800615e:	605a      	strne	r2, [r3, #4]
 8006160:	e7ec      	b.n	800613c <_malloc_r+0xa0>
 8006162:	4623      	mov	r3, r4
 8006164:	6864      	ldr	r4, [r4, #4]
 8006166:	e7b2      	b.n	80060ce <_malloc_r+0x32>
 8006168:	4634      	mov	r4, r6
 800616a:	6876      	ldr	r6, [r6, #4]
 800616c:	e7b9      	b.n	80060e2 <_malloc_r+0x46>
 800616e:	230c      	movs	r3, #12
 8006170:	603b      	str	r3, [r7, #0]
 8006172:	4638      	mov	r0, r7
 8006174:	f000 f8ac 	bl	80062d0 <__malloc_unlock>
 8006178:	e7a1      	b.n	80060be <_malloc_r+0x22>
 800617a:	6025      	str	r5, [r4, #0]
 800617c:	e7de      	b.n	800613c <_malloc_r+0xa0>
 800617e:	bf00      	nop
 8006180:	200003d8 	.word	0x200003d8

08006184 <iprintf>:
 8006184:	b40f      	push	{r0, r1, r2, r3}
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <iprintf+0x2c>)
 8006188:	b513      	push	{r0, r1, r4, lr}
 800618a:	681c      	ldr	r4, [r3, #0]
 800618c:	b124      	cbz	r4, 8006198 <iprintf+0x14>
 800618e:	69a3      	ldr	r3, [r4, #24]
 8006190:	b913      	cbnz	r3, 8006198 <iprintf+0x14>
 8006192:	4620      	mov	r0, r4
 8006194:	f7ff fe48 	bl	8005e28 <__sinit>
 8006198:	ab05      	add	r3, sp, #20
 800619a:	9a04      	ldr	r2, [sp, #16]
 800619c:	68a1      	ldr	r1, [r4, #8]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 f8c5 	bl	8006330 <_vfiprintf_r>
 80061a6:	b002      	add	sp, #8
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	b004      	add	sp, #16
 80061ae:	4770      	bx	lr
 80061b0:	2000000c 	.word	0x2000000c

080061b4 <_sbrk_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d06      	ldr	r5, [pc, #24]	; (80061d0 <_sbrk_r+0x1c>)
 80061b8:	2300      	movs	r3, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	4608      	mov	r0, r1
 80061be:	602b      	str	r3, [r5, #0]
 80061c0:	f7fb fde2 	bl	8001d88 <_sbrk>
 80061c4:	1c43      	adds	r3, r0, #1
 80061c6:	d102      	bne.n	80061ce <_sbrk_r+0x1a>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	b103      	cbz	r3, 80061ce <_sbrk_r+0x1a>
 80061cc:	6023      	str	r3, [r4, #0]
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	200003e0 	.word	0x200003e0

080061d4 <__sread>:
 80061d4:	b510      	push	{r4, lr}
 80061d6:	460c      	mov	r4, r1
 80061d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061dc:	f000 fb6c 	bl	80068b8 <_read_r>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	bfab      	itete	ge
 80061e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061e6:	89a3      	ldrhlt	r3, [r4, #12]
 80061e8:	181b      	addge	r3, r3, r0
 80061ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ee:	bfac      	ite	ge
 80061f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80061f2:	81a3      	strhlt	r3, [r4, #12]
 80061f4:	bd10      	pop	{r4, pc}

080061f6 <__swrite>:
 80061f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fa:	461f      	mov	r7, r3
 80061fc:	898b      	ldrh	r3, [r1, #12]
 80061fe:	05db      	lsls	r3, r3, #23
 8006200:	4605      	mov	r5, r0
 8006202:	460c      	mov	r4, r1
 8006204:	4616      	mov	r6, r2
 8006206:	d505      	bpl.n	8006214 <__swrite+0x1e>
 8006208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620c:	2302      	movs	r3, #2
 800620e:	2200      	movs	r2, #0
 8006210:	f000 f846 	bl	80062a0 <_lseek_r>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800621a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621e:	81a3      	strh	r3, [r4, #12]
 8006220:	4632      	mov	r2, r6
 8006222:	463b      	mov	r3, r7
 8006224:	4628      	mov	r0, r5
 8006226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800622a:	f000 b817 	b.w	800625c <_write_r>

0800622e <__sseek>:
 800622e:	b510      	push	{r4, lr}
 8006230:	460c      	mov	r4, r1
 8006232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006236:	f000 f833 	bl	80062a0 <_lseek_r>
 800623a:	1c43      	adds	r3, r0, #1
 800623c:	89a3      	ldrh	r3, [r4, #12]
 800623e:	bf15      	itete	ne
 8006240:	6560      	strne	r0, [r4, #84]	; 0x54
 8006242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800624a:	81a3      	strheq	r3, [r4, #12]
 800624c:	bf18      	it	ne
 800624e:	81a3      	strhne	r3, [r4, #12]
 8006250:	bd10      	pop	{r4, pc}

08006252 <__sclose>:
 8006252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006256:	f000 b813 	b.w	8006280 <_close_r>
	...

0800625c <_write_r>:
 800625c:	b538      	push	{r3, r4, r5, lr}
 800625e:	4d07      	ldr	r5, [pc, #28]	; (800627c <_write_r+0x20>)
 8006260:	4604      	mov	r4, r0
 8006262:	4608      	mov	r0, r1
 8006264:	4611      	mov	r1, r2
 8006266:	2200      	movs	r2, #0
 8006268:	602a      	str	r2, [r5, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	f7fa fe70 	bl	8000f50 <_write>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_write_r+0x1e>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_write_r+0x1e>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	200003e0 	.word	0x200003e0

08006280 <_close_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d06      	ldr	r5, [pc, #24]	; (800629c <_close_r+0x1c>)
 8006284:	2300      	movs	r3, #0
 8006286:	4604      	mov	r4, r0
 8006288:	4608      	mov	r0, r1
 800628a:	602b      	str	r3, [r5, #0]
 800628c:	f7fb fd47 	bl	8001d1e <_close>
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	d102      	bne.n	800629a <_close_r+0x1a>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	b103      	cbz	r3, 800629a <_close_r+0x1a>
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	200003e0 	.word	0x200003e0

080062a0 <_lseek_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d07      	ldr	r5, [pc, #28]	; (80062c0 <_lseek_r+0x20>)
 80062a4:	4604      	mov	r4, r0
 80062a6:	4608      	mov	r0, r1
 80062a8:	4611      	mov	r1, r2
 80062aa:	2200      	movs	r2, #0
 80062ac:	602a      	str	r2, [r5, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f7fb fd5c 	bl	8001d6c <_lseek>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d102      	bne.n	80062be <_lseek_r+0x1e>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	b103      	cbz	r3, 80062be <_lseek_r+0x1e>
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	200003e0 	.word	0x200003e0

080062c4 <__malloc_lock>:
 80062c4:	4801      	ldr	r0, [pc, #4]	; (80062cc <__malloc_lock+0x8>)
 80062c6:	f7ff be72 	b.w	8005fae <__retarget_lock_acquire_recursive>
 80062ca:	bf00      	nop
 80062cc:	200003d4 	.word	0x200003d4

080062d0 <__malloc_unlock>:
 80062d0:	4801      	ldr	r0, [pc, #4]	; (80062d8 <__malloc_unlock+0x8>)
 80062d2:	f7ff be6d 	b.w	8005fb0 <__retarget_lock_release_recursive>
 80062d6:	bf00      	nop
 80062d8:	200003d4 	.word	0x200003d4

080062dc <__sfputc_r>:
 80062dc:	6893      	ldr	r3, [r2, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	b410      	push	{r4}
 80062e4:	6093      	str	r3, [r2, #8]
 80062e6:	da08      	bge.n	80062fa <__sfputc_r+0x1e>
 80062e8:	6994      	ldr	r4, [r2, #24]
 80062ea:	42a3      	cmp	r3, r4
 80062ec:	db01      	blt.n	80062f2 <__sfputc_r+0x16>
 80062ee:	290a      	cmp	r1, #10
 80062f0:	d103      	bne.n	80062fa <__sfputc_r+0x1e>
 80062f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062f6:	f000 baf1 	b.w	80068dc <__swbuf_r>
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	1c58      	adds	r0, r3, #1
 80062fe:	6010      	str	r0, [r2, #0]
 8006300:	7019      	strb	r1, [r3, #0]
 8006302:	4608      	mov	r0, r1
 8006304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006308:	4770      	bx	lr

0800630a <__sfputs_r>:
 800630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630c:	4606      	mov	r6, r0
 800630e:	460f      	mov	r7, r1
 8006310:	4614      	mov	r4, r2
 8006312:	18d5      	adds	r5, r2, r3
 8006314:	42ac      	cmp	r4, r5
 8006316:	d101      	bne.n	800631c <__sfputs_r+0x12>
 8006318:	2000      	movs	r0, #0
 800631a:	e007      	b.n	800632c <__sfputs_r+0x22>
 800631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006320:	463a      	mov	r2, r7
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff ffda 	bl	80062dc <__sfputc_r>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d1f3      	bne.n	8006314 <__sfputs_r+0xa>
 800632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006330 <_vfiprintf_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	460d      	mov	r5, r1
 8006336:	b09d      	sub	sp, #116	; 0x74
 8006338:	4614      	mov	r4, r2
 800633a:	4698      	mov	r8, r3
 800633c:	4606      	mov	r6, r0
 800633e:	b118      	cbz	r0, 8006348 <_vfiprintf_r+0x18>
 8006340:	6983      	ldr	r3, [r0, #24]
 8006342:	b90b      	cbnz	r3, 8006348 <_vfiprintf_r+0x18>
 8006344:	f7ff fd70 	bl	8005e28 <__sinit>
 8006348:	4b89      	ldr	r3, [pc, #548]	; (8006570 <_vfiprintf_r+0x240>)
 800634a:	429d      	cmp	r5, r3
 800634c:	d11b      	bne.n	8006386 <_vfiprintf_r+0x56>
 800634e:	6875      	ldr	r5, [r6, #4]
 8006350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006352:	07d9      	lsls	r1, r3, #31
 8006354:	d405      	bmi.n	8006362 <_vfiprintf_r+0x32>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	059a      	lsls	r2, r3, #22
 800635a:	d402      	bmi.n	8006362 <_vfiprintf_r+0x32>
 800635c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800635e:	f7ff fe26 	bl	8005fae <__retarget_lock_acquire_recursive>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	071b      	lsls	r3, r3, #28
 8006366:	d501      	bpl.n	800636c <_vfiprintf_r+0x3c>
 8006368:	692b      	ldr	r3, [r5, #16]
 800636a:	b9eb      	cbnz	r3, 80063a8 <_vfiprintf_r+0x78>
 800636c:	4629      	mov	r1, r5
 800636e:	4630      	mov	r0, r6
 8006370:	f000 fb06 	bl	8006980 <__swsetup_r>
 8006374:	b1c0      	cbz	r0, 80063a8 <_vfiprintf_r+0x78>
 8006376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006378:	07dc      	lsls	r4, r3, #31
 800637a:	d50e      	bpl.n	800639a <_vfiprintf_r+0x6a>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006380:	b01d      	add	sp, #116	; 0x74
 8006382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006386:	4b7b      	ldr	r3, [pc, #492]	; (8006574 <_vfiprintf_r+0x244>)
 8006388:	429d      	cmp	r5, r3
 800638a:	d101      	bne.n	8006390 <_vfiprintf_r+0x60>
 800638c:	68b5      	ldr	r5, [r6, #8]
 800638e:	e7df      	b.n	8006350 <_vfiprintf_r+0x20>
 8006390:	4b79      	ldr	r3, [pc, #484]	; (8006578 <_vfiprintf_r+0x248>)
 8006392:	429d      	cmp	r5, r3
 8006394:	bf08      	it	eq
 8006396:	68f5      	ldreq	r5, [r6, #12]
 8006398:	e7da      	b.n	8006350 <_vfiprintf_r+0x20>
 800639a:	89ab      	ldrh	r3, [r5, #12]
 800639c:	0598      	lsls	r0, r3, #22
 800639e:	d4ed      	bmi.n	800637c <_vfiprintf_r+0x4c>
 80063a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063a2:	f7ff fe05 	bl	8005fb0 <__retarget_lock_release_recursive>
 80063a6:	e7e9      	b.n	800637c <_vfiprintf_r+0x4c>
 80063a8:	2300      	movs	r3, #0
 80063aa:	9309      	str	r3, [sp, #36]	; 0x24
 80063ac:	2320      	movs	r3, #32
 80063ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b6:	2330      	movs	r3, #48	; 0x30
 80063b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800657c <_vfiprintf_r+0x24c>
 80063bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063c0:	f04f 0901 	mov.w	r9, #1
 80063c4:	4623      	mov	r3, r4
 80063c6:	469a      	mov	sl, r3
 80063c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063cc:	b10a      	cbz	r2, 80063d2 <_vfiprintf_r+0xa2>
 80063ce:	2a25      	cmp	r2, #37	; 0x25
 80063d0:	d1f9      	bne.n	80063c6 <_vfiprintf_r+0x96>
 80063d2:	ebba 0b04 	subs.w	fp, sl, r4
 80063d6:	d00b      	beq.n	80063f0 <_vfiprintf_r+0xc0>
 80063d8:	465b      	mov	r3, fp
 80063da:	4622      	mov	r2, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	4630      	mov	r0, r6
 80063e0:	f7ff ff93 	bl	800630a <__sfputs_r>
 80063e4:	3001      	adds	r0, #1
 80063e6:	f000 80aa 	beq.w	800653e <_vfiprintf_r+0x20e>
 80063ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ec:	445a      	add	r2, fp
 80063ee:	9209      	str	r2, [sp, #36]	; 0x24
 80063f0:	f89a 3000 	ldrb.w	r3, [sl]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 80a2 	beq.w	800653e <_vfiprintf_r+0x20e>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006404:	f10a 0a01 	add.w	sl, sl, #1
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006410:	931a      	str	r3, [sp, #104]	; 0x68
 8006412:	4654      	mov	r4, sl
 8006414:	2205      	movs	r2, #5
 8006416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800641a:	4858      	ldr	r0, [pc, #352]	; (800657c <_vfiprintf_r+0x24c>)
 800641c:	f7f9 fef8 	bl	8000210 <memchr>
 8006420:	9a04      	ldr	r2, [sp, #16]
 8006422:	b9d8      	cbnz	r0, 800645c <_vfiprintf_r+0x12c>
 8006424:	06d1      	lsls	r1, r2, #27
 8006426:	bf44      	itt	mi
 8006428:	2320      	movmi	r3, #32
 800642a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642e:	0713      	lsls	r3, r2, #28
 8006430:	bf44      	itt	mi
 8006432:	232b      	movmi	r3, #43	; 0x2b
 8006434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006438:	f89a 3000 	ldrb.w	r3, [sl]
 800643c:	2b2a      	cmp	r3, #42	; 0x2a
 800643e:	d015      	beq.n	800646c <_vfiprintf_r+0x13c>
 8006440:	9a07      	ldr	r2, [sp, #28]
 8006442:	4654      	mov	r4, sl
 8006444:	2000      	movs	r0, #0
 8006446:	f04f 0c0a 	mov.w	ip, #10
 800644a:	4621      	mov	r1, r4
 800644c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006450:	3b30      	subs	r3, #48	; 0x30
 8006452:	2b09      	cmp	r3, #9
 8006454:	d94e      	bls.n	80064f4 <_vfiprintf_r+0x1c4>
 8006456:	b1b0      	cbz	r0, 8006486 <_vfiprintf_r+0x156>
 8006458:	9207      	str	r2, [sp, #28]
 800645a:	e014      	b.n	8006486 <_vfiprintf_r+0x156>
 800645c:	eba0 0308 	sub.w	r3, r0, r8
 8006460:	fa09 f303 	lsl.w	r3, r9, r3
 8006464:	4313      	orrs	r3, r2
 8006466:	9304      	str	r3, [sp, #16]
 8006468:	46a2      	mov	sl, r4
 800646a:	e7d2      	b.n	8006412 <_vfiprintf_r+0xe2>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	1d19      	adds	r1, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	9103      	str	r1, [sp, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	bfbb      	ittet	lt
 8006478:	425b      	neglt	r3, r3
 800647a:	f042 0202 	orrlt.w	r2, r2, #2
 800647e:	9307      	strge	r3, [sp, #28]
 8006480:	9307      	strlt	r3, [sp, #28]
 8006482:	bfb8      	it	lt
 8006484:	9204      	strlt	r2, [sp, #16]
 8006486:	7823      	ldrb	r3, [r4, #0]
 8006488:	2b2e      	cmp	r3, #46	; 0x2e
 800648a:	d10c      	bne.n	80064a6 <_vfiprintf_r+0x176>
 800648c:	7863      	ldrb	r3, [r4, #1]
 800648e:	2b2a      	cmp	r3, #42	; 0x2a
 8006490:	d135      	bne.n	80064fe <_vfiprintf_r+0x1ce>
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	9203      	str	r2, [sp, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	bfb8      	it	lt
 800649e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80064a2:	3402      	adds	r4, #2
 80064a4:	9305      	str	r3, [sp, #20]
 80064a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800658c <_vfiprintf_r+0x25c>
 80064aa:	7821      	ldrb	r1, [r4, #0]
 80064ac:	2203      	movs	r2, #3
 80064ae:	4650      	mov	r0, sl
 80064b0:	f7f9 feae 	bl	8000210 <memchr>
 80064b4:	b140      	cbz	r0, 80064c8 <_vfiprintf_r+0x198>
 80064b6:	2340      	movs	r3, #64	; 0x40
 80064b8:	eba0 000a 	sub.w	r0, r0, sl
 80064bc:	fa03 f000 	lsl.w	r0, r3, r0
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	4303      	orrs	r3, r0
 80064c4:	3401      	adds	r4, #1
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	482c      	ldr	r0, [pc, #176]	; (8006580 <_vfiprintf_r+0x250>)
 80064ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064d2:	2206      	movs	r2, #6
 80064d4:	f7f9 fe9c 	bl	8000210 <memchr>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d03f      	beq.n	800655c <_vfiprintf_r+0x22c>
 80064dc:	4b29      	ldr	r3, [pc, #164]	; (8006584 <_vfiprintf_r+0x254>)
 80064de:	bb1b      	cbnz	r3, 8006528 <_vfiprintf_r+0x1f8>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	3307      	adds	r3, #7
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	3308      	adds	r3, #8
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ee:	443b      	add	r3, r7
 80064f0:	9309      	str	r3, [sp, #36]	; 0x24
 80064f2:	e767      	b.n	80063c4 <_vfiprintf_r+0x94>
 80064f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f8:	460c      	mov	r4, r1
 80064fa:	2001      	movs	r0, #1
 80064fc:	e7a5      	b.n	800644a <_vfiprintf_r+0x11a>
 80064fe:	2300      	movs	r3, #0
 8006500:	3401      	adds	r4, #1
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	4619      	mov	r1, r3
 8006506:	f04f 0c0a 	mov.w	ip, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006510:	3a30      	subs	r2, #48	; 0x30
 8006512:	2a09      	cmp	r2, #9
 8006514:	d903      	bls.n	800651e <_vfiprintf_r+0x1ee>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0c5      	beq.n	80064a6 <_vfiprintf_r+0x176>
 800651a:	9105      	str	r1, [sp, #20]
 800651c:	e7c3      	b.n	80064a6 <_vfiprintf_r+0x176>
 800651e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006522:	4604      	mov	r4, r0
 8006524:	2301      	movs	r3, #1
 8006526:	e7f0      	b.n	800650a <_vfiprintf_r+0x1da>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4b16      	ldr	r3, [pc, #88]	; (8006588 <_vfiprintf_r+0x258>)
 8006530:	a904      	add	r1, sp, #16
 8006532:	4630      	mov	r0, r6
 8006534:	f3af 8000 	nop.w
 8006538:	4607      	mov	r7, r0
 800653a:	1c78      	adds	r0, r7, #1
 800653c:	d1d6      	bne.n	80064ec <_vfiprintf_r+0x1bc>
 800653e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006540:	07d9      	lsls	r1, r3, #31
 8006542:	d405      	bmi.n	8006550 <_vfiprintf_r+0x220>
 8006544:	89ab      	ldrh	r3, [r5, #12]
 8006546:	059a      	lsls	r2, r3, #22
 8006548:	d402      	bmi.n	8006550 <_vfiprintf_r+0x220>
 800654a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800654c:	f7ff fd30 	bl	8005fb0 <__retarget_lock_release_recursive>
 8006550:	89ab      	ldrh	r3, [r5, #12]
 8006552:	065b      	lsls	r3, r3, #25
 8006554:	f53f af12 	bmi.w	800637c <_vfiprintf_r+0x4c>
 8006558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800655a:	e711      	b.n	8006380 <_vfiprintf_r+0x50>
 800655c:	ab03      	add	r3, sp, #12
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	462a      	mov	r2, r5
 8006562:	4b09      	ldr	r3, [pc, #36]	; (8006588 <_vfiprintf_r+0x258>)
 8006564:	a904      	add	r1, sp, #16
 8006566:	4630      	mov	r0, r6
 8006568:	f000 f880 	bl	800666c <_printf_i>
 800656c:	e7e4      	b.n	8006538 <_vfiprintf_r+0x208>
 800656e:	bf00      	nop
 8006570:	08006c88 	.word	0x08006c88
 8006574:	08006ca8 	.word	0x08006ca8
 8006578:	08006c68 	.word	0x08006c68
 800657c:	08006ccc 	.word	0x08006ccc
 8006580:	08006cd6 	.word	0x08006cd6
 8006584:	00000000 	.word	0x00000000
 8006588:	0800630b 	.word	0x0800630b
 800658c:	08006cd2 	.word	0x08006cd2

08006590 <_printf_common>:
 8006590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006594:	4616      	mov	r6, r2
 8006596:	4699      	mov	r9, r3
 8006598:	688a      	ldr	r2, [r1, #8]
 800659a:	690b      	ldr	r3, [r1, #16]
 800659c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a0:	4293      	cmp	r3, r2
 80065a2:	bfb8      	it	lt
 80065a4:	4613      	movlt	r3, r2
 80065a6:	6033      	str	r3, [r6, #0]
 80065a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065ac:	4607      	mov	r7, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	b10a      	cbz	r2, 80065b6 <_printf_common+0x26>
 80065b2:	3301      	adds	r3, #1
 80065b4:	6033      	str	r3, [r6, #0]
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	0699      	lsls	r1, r3, #26
 80065ba:	bf42      	ittt	mi
 80065bc:	6833      	ldrmi	r3, [r6, #0]
 80065be:	3302      	addmi	r3, #2
 80065c0:	6033      	strmi	r3, [r6, #0]
 80065c2:	6825      	ldr	r5, [r4, #0]
 80065c4:	f015 0506 	ands.w	r5, r5, #6
 80065c8:	d106      	bne.n	80065d8 <_printf_common+0x48>
 80065ca:	f104 0a19 	add.w	sl, r4, #25
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	6832      	ldr	r2, [r6, #0]
 80065d2:	1a9b      	subs	r3, r3, r2
 80065d4:	42ab      	cmp	r3, r5
 80065d6:	dc26      	bgt.n	8006626 <_printf_common+0x96>
 80065d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065dc:	1e13      	subs	r3, r2, #0
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	bf18      	it	ne
 80065e2:	2301      	movne	r3, #1
 80065e4:	0692      	lsls	r2, r2, #26
 80065e6:	d42b      	bmi.n	8006640 <_printf_common+0xb0>
 80065e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ec:	4649      	mov	r1, r9
 80065ee:	4638      	mov	r0, r7
 80065f0:	47c0      	blx	r8
 80065f2:	3001      	adds	r0, #1
 80065f4:	d01e      	beq.n	8006634 <_printf_common+0xa4>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	68e5      	ldr	r5, [r4, #12]
 80065fa:	6832      	ldr	r2, [r6, #0]
 80065fc:	f003 0306 	and.w	r3, r3, #6
 8006600:	2b04      	cmp	r3, #4
 8006602:	bf08      	it	eq
 8006604:	1aad      	subeq	r5, r5, r2
 8006606:	68a3      	ldr	r3, [r4, #8]
 8006608:	6922      	ldr	r2, [r4, #16]
 800660a:	bf0c      	ite	eq
 800660c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006610:	2500      	movne	r5, #0
 8006612:	4293      	cmp	r3, r2
 8006614:	bfc4      	itt	gt
 8006616:	1a9b      	subgt	r3, r3, r2
 8006618:	18ed      	addgt	r5, r5, r3
 800661a:	2600      	movs	r6, #0
 800661c:	341a      	adds	r4, #26
 800661e:	42b5      	cmp	r5, r6
 8006620:	d11a      	bne.n	8006658 <_printf_common+0xc8>
 8006622:	2000      	movs	r0, #0
 8006624:	e008      	b.n	8006638 <_printf_common+0xa8>
 8006626:	2301      	movs	r3, #1
 8006628:	4652      	mov	r2, sl
 800662a:	4649      	mov	r1, r9
 800662c:	4638      	mov	r0, r7
 800662e:	47c0      	blx	r8
 8006630:	3001      	adds	r0, #1
 8006632:	d103      	bne.n	800663c <_printf_common+0xac>
 8006634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663c:	3501      	adds	r5, #1
 800663e:	e7c6      	b.n	80065ce <_printf_common+0x3e>
 8006640:	18e1      	adds	r1, r4, r3
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	2030      	movs	r0, #48	; 0x30
 8006646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800664a:	4422      	add	r2, r4
 800664c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006654:	3302      	adds	r3, #2
 8006656:	e7c7      	b.n	80065e8 <_printf_common+0x58>
 8006658:	2301      	movs	r3, #1
 800665a:	4622      	mov	r2, r4
 800665c:	4649      	mov	r1, r9
 800665e:	4638      	mov	r0, r7
 8006660:	47c0      	blx	r8
 8006662:	3001      	adds	r0, #1
 8006664:	d0e6      	beq.n	8006634 <_printf_common+0xa4>
 8006666:	3601      	adds	r6, #1
 8006668:	e7d9      	b.n	800661e <_printf_common+0x8e>
	...

0800666c <_printf_i>:
 800666c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006670:	7e0f      	ldrb	r7, [r1, #24]
 8006672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006674:	2f78      	cmp	r7, #120	; 0x78
 8006676:	4691      	mov	r9, r2
 8006678:	4680      	mov	r8, r0
 800667a:	460c      	mov	r4, r1
 800667c:	469a      	mov	sl, r3
 800667e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006682:	d807      	bhi.n	8006694 <_printf_i+0x28>
 8006684:	2f62      	cmp	r7, #98	; 0x62
 8006686:	d80a      	bhi.n	800669e <_printf_i+0x32>
 8006688:	2f00      	cmp	r7, #0
 800668a:	f000 80d8 	beq.w	800683e <_printf_i+0x1d2>
 800668e:	2f58      	cmp	r7, #88	; 0x58
 8006690:	f000 80a3 	beq.w	80067da <_printf_i+0x16e>
 8006694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800669c:	e03a      	b.n	8006714 <_printf_i+0xa8>
 800669e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066a2:	2b15      	cmp	r3, #21
 80066a4:	d8f6      	bhi.n	8006694 <_printf_i+0x28>
 80066a6:	a101      	add	r1, pc, #4	; (adr r1, 80066ac <_printf_i+0x40>)
 80066a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066ac:	08006705 	.word	0x08006705
 80066b0:	08006719 	.word	0x08006719
 80066b4:	08006695 	.word	0x08006695
 80066b8:	08006695 	.word	0x08006695
 80066bc:	08006695 	.word	0x08006695
 80066c0:	08006695 	.word	0x08006695
 80066c4:	08006719 	.word	0x08006719
 80066c8:	08006695 	.word	0x08006695
 80066cc:	08006695 	.word	0x08006695
 80066d0:	08006695 	.word	0x08006695
 80066d4:	08006695 	.word	0x08006695
 80066d8:	08006825 	.word	0x08006825
 80066dc:	08006749 	.word	0x08006749
 80066e0:	08006807 	.word	0x08006807
 80066e4:	08006695 	.word	0x08006695
 80066e8:	08006695 	.word	0x08006695
 80066ec:	08006847 	.word	0x08006847
 80066f0:	08006695 	.word	0x08006695
 80066f4:	08006749 	.word	0x08006749
 80066f8:	08006695 	.word	0x08006695
 80066fc:	08006695 	.word	0x08006695
 8006700:	0800680f 	.word	0x0800680f
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	602a      	str	r2, [r5, #0]
 800670c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006714:	2301      	movs	r3, #1
 8006716:	e0a3      	b.n	8006860 <_printf_i+0x1f4>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	6829      	ldr	r1, [r5, #0]
 800671c:	0606      	lsls	r6, r0, #24
 800671e:	f101 0304 	add.w	r3, r1, #4
 8006722:	d50a      	bpl.n	800673a <_printf_i+0xce>
 8006724:	680e      	ldr	r6, [r1, #0]
 8006726:	602b      	str	r3, [r5, #0]
 8006728:	2e00      	cmp	r6, #0
 800672a:	da03      	bge.n	8006734 <_printf_i+0xc8>
 800672c:	232d      	movs	r3, #45	; 0x2d
 800672e:	4276      	negs	r6, r6
 8006730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006734:	485e      	ldr	r0, [pc, #376]	; (80068b0 <_printf_i+0x244>)
 8006736:	230a      	movs	r3, #10
 8006738:	e019      	b.n	800676e <_printf_i+0x102>
 800673a:	680e      	ldr	r6, [r1, #0]
 800673c:	602b      	str	r3, [r5, #0]
 800673e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006742:	bf18      	it	ne
 8006744:	b236      	sxthne	r6, r6
 8006746:	e7ef      	b.n	8006728 <_printf_i+0xbc>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	6820      	ldr	r0, [r4, #0]
 800674c:	1d19      	adds	r1, r3, #4
 800674e:	6029      	str	r1, [r5, #0]
 8006750:	0601      	lsls	r1, r0, #24
 8006752:	d501      	bpl.n	8006758 <_printf_i+0xec>
 8006754:	681e      	ldr	r6, [r3, #0]
 8006756:	e002      	b.n	800675e <_printf_i+0xf2>
 8006758:	0646      	lsls	r6, r0, #25
 800675a:	d5fb      	bpl.n	8006754 <_printf_i+0xe8>
 800675c:	881e      	ldrh	r6, [r3, #0]
 800675e:	4854      	ldr	r0, [pc, #336]	; (80068b0 <_printf_i+0x244>)
 8006760:	2f6f      	cmp	r7, #111	; 0x6f
 8006762:	bf0c      	ite	eq
 8006764:	2308      	moveq	r3, #8
 8006766:	230a      	movne	r3, #10
 8006768:	2100      	movs	r1, #0
 800676a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800676e:	6865      	ldr	r5, [r4, #4]
 8006770:	60a5      	str	r5, [r4, #8]
 8006772:	2d00      	cmp	r5, #0
 8006774:	bfa2      	ittt	ge
 8006776:	6821      	ldrge	r1, [r4, #0]
 8006778:	f021 0104 	bicge.w	r1, r1, #4
 800677c:	6021      	strge	r1, [r4, #0]
 800677e:	b90e      	cbnz	r6, 8006784 <_printf_i+0x118>
 8006780:	2d00      	cmp	r5, #0
 8006782:	d04d      	beq.n	8006820 <_printf_i+0x1b4>
 8006784:	4615      	mov	r5, r2
 8006786:	fbb6 f1f3 	udiv	r1, r6, r3
 800678a:	fb03 6711 	mls	r7, r3, r1, r6
 800678e:	5dc7      	ldrb	r7, [r0, r7]
 8006790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006794:	4637      	mov	r7, r6
 8006796:	42bb      	cmp	r3, r7
 8006798:	460e      	mov	r6, r1
 800679a:	d9f4      	bls.n	8006786 <_printf_i+0x11a>
 800679c:	2b08      	cmp	r3, #8
 800679e:	d10b      	bne.n	80067b8 <_printf_i+0x14c>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07de      	lsls	r6, r3, #31
 80067a4:	d508      	bpl.n	80067b8 <_printf_i+0x14c>
 80067a6:	6923      	ldr	r3, [r4, #16]
 80067a8:	6861      	ldr	r1, [r4, #4]
 80067aa:	4299      	cmp	r1, r3
 80067ac:	bfde      	ittt	le
 80067ae:	2330      	movle	r3, #48	; 0x30
 80067b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80067b8:	1b52      	subs	r2, r2, r5
 80067ba:	6122      	str	r2, [r4, #16]
 80067bc:	f8cd a000 	str.w	sl, [sp]
 80067c0:	464b      	mov	r3, r9
 80067c2:	aa03      	add	r2, sp, #12
 80067c4:	4621      	mov	r1, r4
 80067c6:	4640      	mov	r0, r8
 80067c8:	f7ff fee2 	bl	8006590 <_printf_common>
 80067cc:	3001      	adds	r0, #1
 80067ce:	d14c      	bne.n	800686a <_printf_i+0x1fe>
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d4:	b004      	add	sp, #16
 80067d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067da:	4835      	ldr	r0, [pc, #212]	; (80068b0 <_printf_i+0x244>)
 80067dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067e0:	6829      	ldr	r1, [r5, #0]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80067e8:	6029      	str	r1, [r5, #0]
 80067ea:	061d      	lsls	r5, r3, #24
 80067ec:	d514      	bpl.n	8006818 <_printf_i+0x1ac>
 80067ee:	07df      	lsls	r7, r3, #31
 80067f0:	bf44      	itt	mi
 80067f2:	f043 0320 	orrmi.w	r3, r3, #32
 80067f6:	6023      	strmi	r3, [r4, #0]
 80067f8:	b91e      	cbnz	r6, 8006802 <_printf_i+0x196>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f023 0320 	bic.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	2310      	movs	r3, #16
 8006804:	e7b0      	b.n	8006768 <_printf_i+0xfc>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	2378      	movs	r3, #120	; 0x78
 8006810:	4828      	ldr	r0, [pc, #160]	; (80068b4 <_printf_i+0x248>)
 8006812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006816:	e7e3      	b.n	80067e0 <_printf_i+0x174>
 8006818:	0659      	lsls	r1, r3, #25
 800681a:	bf48      	it	mi
 800681c:	b2b6      	uxthmi	r6, r6
 800681e:	e7e6      	b.n	80067ee <_printf_i+0x182>
 8006820:	4615      	mov	r5, r2
 8006822:	e7bb      	b.n	800679c <_printf_i+0x130>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	6826      	ldr	r6, [r4, #0]
 8006828:	6961      	ldr	r1, [r4, #20]
 800682a:	1d18      	adds	r0, r3, #4
 800682c:	6028      	str	r0, [r5, #0]
 800682e:	0635      	lsls	r5, r6, #24
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	d501      	bpl.n	8006838 <_printf_i+0x1cc>
 8006834:	6019      	str	r1, [r3, #0]
 8006836:	e002      	b.n	800683e <_printf_i+0x1d2>
 8006838:	0670      	lsls	r0, r6, #25
 800683a:	d5fb      	bpl.n	8006834 <_printf_i+0x1c8>
 800683c:	8019      	strh	r1, [r3, #0]
 800683e:	2300      	movs	r3, #0
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	4615      	mov	r5, r2
 8006844:	e7ba      	b.n	80067bc <_printf_i+0x150>
 8006846:	682b      	ldr	r3, [r5, #0]
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	602a      	str	r2, [r5, #0]
 800684c:	681d      	ldr	r5, [r3, #0]
 800684e:	6862      	ldr	r2, [r4, #4]
 8006850:	2100      	movs	r1, #0
 8006852:	4628      	mov	r0, r5
 8006854:	f7f9 fcdc 	bl	8000210 <memchr>
 8006858:	b108      	cbz	r0, 800685e <_printf_i+0x1f2>
 800685a:	1b40      	subs	r0, r0, r5
 800685c:	6060      	str	r0, [r4, #4]
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	2300      	movs	r3, #0
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006868:	e7a8      	b.n	80067bc <_printf_i+0x150>
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	462a      	mov	r2, r5
 800686e:	4649      	mov	r1, r9
 8006870:	4640      	mov	r0, r8
 8006872:	47d0      	blx	sl
 8006874:	3001      	adds	r0, #1
 8006876:	d0ab      	beq.n	80067d0 <_printf_i+0x164>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	079b      	lsls	r3, r3, #30
 800687c:	d413      	bmi.n	80068a6 <_printf_i+0x23a>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	4298      	cmp	r0, r3
 8006884:	bfb8      	it	lt
 8006886:	4618      	movlt	r0, r3
 8006888:	e7a4      	b.n	80067d4 <_printf_i+0x168>
 800688a:	2301      	movs	r3, #1
 800688c:	4632      	mov	r2, r6
 800688e:	4649      	mov	r1, r9
 8006890:	4640      	mov	r0, r8
 8006892:	47d0      	blx	sl
 8006894:	3001      	adds	r0, #1
 8006896:	d09b      	beq.n	80067d0 <_printf_i+0x164>
 8006898:	3501      	adds	r5, #1
 800689a:	68e3      	ldr	r3, [r4, #12]
 800689c:	9903      	ldr	r1, [sp, #12]
 800689e:	1a5b      	subs	r3, r3, r1
 80068a0:	42ab      	cmp	r3, r5
 80068a2:	dcf2      	bgt.n	800688a <_printf_i+0x21e>
 80068a4:	e7eb      	b.n	800687e <_printf_i+0x212>
 80068a6:	2500      	movs	r5, #0
 80068a8:	f104 0619 	add.w	r6, r4, #25
 80068ac:	e7f5      	b.n	800689a <_printf_i+0x22e>
 80068ae:	bf00      	nop
 80068b0:	08006cdd 	.word	0x08006cdd
 80068b4:	08006cee 	.word	0x08006cee

080068b8 <_read_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d07      	ldr	r5, [pc, #28]	; (80068d8 <_read_r+0x20>)
 80068bc:	4604      	mov	r4, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fb fa0c 	bl	8001ce4 <_read>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_read_r+0x1e>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_read_r+0x1e>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200003e0 	.word	0x200003e0

080068dc <__swbuf_r>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	4614      	mov	r4, r2
 80068e2:	4605      	mov	r5, r0
 80068e4:	b118      	cbz	r0, 80068ee <__swbuf_r+0x12>
 80068e6:	6983      	ldr	r3, [r0, #24]
 80068e8:	b90b      	cbnz	r3, 80068ee <__swbuf_r+0x12>
 80068ea:	f7ff fa9d 	bl	8005e28 <__sinit>
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <__swbuf_r+0x98>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d12b      	bne.n	800694c <__swbuf_r+0x70>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d52f      	bpl.n	8006960 <__swbuf_r+0x84>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b36b      	cbz	r3, 8006960 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	1ac0      	subs	r0, r0, r3
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	b2f6      	uxtb	r6, r6
 800690e:	4283      	cmp	r3, r0
 8006910:	4637      	mov	r7, r6
 8006912:	dc04      	bgt.n	800691e <__swbuf_r+0x42>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f7ff f9e0 	bl	8005cdc <_fflush_r>
 800691c:	bb30      	cbnz	r0, 800696c <__swbuf_r+0x90>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	3b01      	subs	r3, #1
 8006922:	60a3      	str	r3, [r4, #8]
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	701e      	strb	r6, [r3, #0]
 800692c:	6963      	ldr	r3, [r4, #20]
 800692e:	3001      	adds	r0, #1
 8006930:	4283      	cmp	r3, r0
 8006932:	d004      	beq.n	800693e <__swbuf_r+0x62>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d506      	bpl.n	8006948 <__swbuf_r+0x6c>
 800693a:	2e0a      	cmp	r6, #10
 800693c:	d104      	bne.n	8006948 <__swbuf_r+0x6c>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f7ff f9cb 	bl	8005cdc <_fflush_r>
 8006946:	b988      	cbnz	r0, 800696c <__swbuf_r+0x90>
 8006948:	4638      	mov	r0, r7
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <__swbuf_r+0x9c>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <__swbuf_r+0x7a>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7cf      	b.n	80068f6 <__swbuf_r+0x1a>
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <__swbuf_r+0xa0>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7ca      	b.n	80068f6 <__swbuf_r+0x1a>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f80c 	bl	8006980 <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0cb      	beq.n	8006904 <__swbuf_r+0x28>
 800696c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006970:	e7ea      	b.n	8006948 <__swbuf_r+0x6c>
 8006972:	bf00      	nop
 8006974:	08006c88 	.word	0x08006c88
 8006978:	08006ca8 	.word	0x08006ca8
 800697c:	08006c68 	.word	0x08006c68

08006980 <__swsetup_r>:
 8006980:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <__swsetup_r+0xcc>)
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	681d      	ldr	r5, [r3, #0]
 8006986:	4606      	mov	r6, r0
 8006988:	460c      	mov	r4, r1
 800698a:	b125      	cbz	r5, 8006996 <__swsetup_r+0x16>
 800698c:	69ab      	ldr	r3, [r5, #24]
 800698e:	b913      	cbnz	r3, 8006996 <__swsetup_r+0x16>
 8006990:	4628      	mov	r0, r5
 8006992:	f7ff fa49 	bl	8005e28 <__sinit>
 8006996:	4b2e      	ldr	r3, [pc, #184]	; (8006a50 <__swsetup_r+0xd0>)
 8006998:	429c      	cmp	r4, r3
 800699a:	d10f      	bne.n	80069bc <__swsetup_r+0x3c>
 800699c:	686c      	ldr	r4, [r5, #4]
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069a4:	0719      	lsls	r1, r3, #28
 80069a6:	d42c      	bmi.n	8006a02 <__swsetup_r+0x82>
 80069a8:	06dd      	lsls	r5, r3, #27
 80069aa:	d411      	bmi.n	80069d0 <__swsetup_r+0x50>
 80069ac:	2309      	movs	r3, #9
 80069ae:	6033      	str	r3, [r6, #0]
 80069b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ba:	e03e      	b.n	8006a3a <__swsetup_r+0xba>
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <__swsetup_r+0xd4>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	d101      	bne.n	80069c6 <__swsetup_r+0x46>
 80069c2:	68ac      	ldr	r4, [r5, #8]
 80069c4:	e7eb      	b.n	800699e <__swsetup_r+0x1e>
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <__swsetup_r+0xd8>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	bf08      	it	eq
 80069cc:	68ec      	ldreq	r4, [r5, #12]
 80069ce:	e7e6      	b.n	800699e <__swsetup_r+0x1e>
 80069d0:	0758      	lsls	r0, r3, #29
 80069d2:	d512      	bpl.n	80069fa <__swsetup_r+0x7a>
 80069d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069d6:	b141      	cbz	r1, 80069ea <__swsetup_r+0x6a>
 80069d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069dc:	4299      	cmp	r1, r3
 80069de:	d002      	beq.n	80069e6 <__swsetup_r+0x66>
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff faef 	bl	8005fc4 <_free_r>
 80069e6:	2300      	movs	r3, #0
 80069e8:	6363      	str	r3, [r4, #52]	; 0x34
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	2300      	movs	r3, #0
 80069f4:	6063      	str	r3, [r4, #4]
 80069f6:	6923      	ldr	r3, [r4, #16]
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f043 0308 	orr.w	r3, r3, #8
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	6923      	ldr	r3, [r4, #16]
 8006a04:	b94b      	cbnz	r3, 8006a1a <__swsetup_r+0x9a>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a10:	d003      	beq.n	8006a1a <__swsetup_r+0x9a>
 8006a12:	4621      	mov	r1, r4
 8006a14:	4630      	mov	r0, r6
 8006a16:	f000 f847 	bl	8006aa8 <__smakebuf_r>
 8006a1a:	89a0      	ldrh	r0, [r4, #12]
 8006a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a20:	f010 0301 	ands.w	r3, r0, #1
 8006a24:	d00a      	beq.n	8006a3c <__swsetup_r+0xbc>
 8006a26:	2300      	movs	r3, #0
 8006a28:	60a3      	str	r3, [r4, #8]
 8006a2a:	6963      	ldr	r3, [r4, #20]
 8006a2c:	425b      	negs	r3, r3
 8006a2e:	61a3      	str	r3, [r4, #24]
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	b943      	cbnz	r3, 8006a46 <__swsetup_r+0xc6>
 8006a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a38:	d1ba      	bne.n	80069b0 <__swsetup_r+0x30>
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	0781      	lsls	r1, r0, #30
 8006a3e:	bf58      	it	pl
 8006a40:	6963      	ldrpl	r3, [r4, #20]
 8006a42:	60a3      	str	r3, [r4, #8]
 8006a44:	e7f4      	b.n	8006a30 <__swsetup_r+0xb0>
 8006a46:	2000      	movs	r0, #0
 8006a48:	e7f7      	b.n	8006a3a <__swsetup_r+0xba>
 8006a4a:	bf00      	nop
 8006a4c:	2000000c 	.word	0x2000000c
 8006a50:	08006c88 	.word	0x08006c88
 8006a54:	08006ca8 	.word	0x08006ca8
 8006a58:	08006c68 	.word	0x08006c68

08006a5c <__swhatbuf_r>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	460e      	mov	r6, r1
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	2900      	cmp	r1, #0
 8006a66:	b096      	sub	sp, #88	; 0x58
 8006a68:	4614      	mov	r4, r2
 8006a6a:	461d      	mov	r5, r3
 8006a6c:	da08      	bge.n	8006a80 <__swhatbuf_r+0x24>
 8006a6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	602a      	str	r2, [r5, #0]
 8006a76:	061a      	lsls	r2, r3, #24
 8006a78:	d410      	bmi.n	8006a9c <__swhatbuf_r+0x40>
 8006a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a7e:	e00e      	b.n	8006a9e <__swhatbuf_r+0x42>
 8006a80:	466a      	mov	r2, sp
 8006a82:	f000 f851 	bl	8006b28 <_fstat_r>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	dbf1      	blt.n	8006a6e <__swhatbuf_r+0x12>
 8006a8a:	9a01      	ldr	r2, [sp, #4]
 8006a8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a94:	425a      	negs	r2, r3
 8006a96:	415a      	adcs	r2, r3
 8006a98:	602a      	str	r2, [r5, #0]
 8006a9a:	e7ee      	b.n	8006a7a <__swhatbuf_r+0x1e>
 8006a9c:	2340      	movs	r3, #64	; 0x40
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	b016      	add	sp, #88	; 0x58
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006aa8 <__smakebuf_r>:
 8006aa8:	898b      	ldrh	r3, [r1, #12]
 8006aaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aac:	079d      	lsls	r5, r3, #30
 8006aae:	4606      	mov	r6, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	d507      	bpl.n	8006ac4 <__smakebuf_r+0x1c>
 8006ab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	6123      	str	r3, [r4, #16]
 8006abc:	2301      	movs	r3, #1
 8006abe:	6163      	str	r3, [r4, #20]
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	ab01      	add	r3, sp, #4
 8006ac6:	466a      	mov	r2, sp
 8006ac8:	f7ff ffc8 	bl	8006a5c <__swhatbuf_r>
 8006acc:	9900      	ldr	r1, [sp, #0]
 8006ace:	4605      	mov	r5, r0
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff fae3 	bl	800609c <_malloc_r>
 8006ad6:	b948      	cbnz	r0, 8006aec <__smakebuf_r+0x44>
 8006ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006adc:	059a      	lsls	r2, r3, #22
 8006ade:	d4ef      	bmi.n	8006ac0 <__smakebuf_r+0x18>
 8006ae0:	f023 0303 	bic.w	r3, r3, #3
 8006ae4:	f043 0302 	orr.w	r3, r3, #2
 8006ae8:	81a3      	strh	r3, [r4, #12]
 8006aea:	e7e3      	b.n	8006ab4 <__smakebuf_r+0xc>
 8006aec:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <__smakebuf_r+0x7c>)
 8006aee:	62b3      	str	r3, [r6, #40]	; 0x28
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	6020      	str	r0, [r4, #0]
 8006af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af8:	81a3      	strh	r3, [r4, #12]
 8006afa:	9b00      	ldr	r3, [sp, #0]
 8006afc:	6163      	str	r3, [r4, #20]
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	6120      	str	r0, [r4, #16]
 8006b02:	b15b      	cbz	r3, 8006b1c <__smakebuf_r+0x74>
 8006b04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f000 f81f 	bl	8006b4c <_isatty_r>
 8006b0e:	b128      	cbz	r0, 8006b1c <__smakebuf_r+0x74>
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	89a0      	ldrh	r0, [r4, #12]
 8006b1e:	4305      	orrs	r5, r0
 8006b20:	81a5      	strh	r5, [r4, #12]
 8006b22:	e7cd      	b.n	8006ac0 <__smakebuf_r+0x18>
 8006b24:	08005dc1 	.word	0x08005dc1

08006b28 <_fstat_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4d07      	ldr	r5, [pc, #28]	; (8006b48 <_fstat_r+0x20>)
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	f7fb f8fe 	bl	8001d36 <_fstat>
 8006b3a:	1c43      	adds	r3, r0, #1
 8006b3c:	d102      	bne.n	8006b44 <_fstat_r+0x1c>
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	b103      	cbz	r3, 8006b44 <_fstat_r+0x1c>
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	bd38      	pop	{r3, r4, r5, pc}
 8006b46:	bf00      	nop
 8006b48:	200003e0 	.word	0x200003e0

08006b4c <_isatty_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d06      	ldr	r5, [pc, #24]	; (8006b68 <_isatty_r+0x1c>)
 8006b50:	2300      	movs	r3, #0
 8006b52:	4604      	mov	r4, r0
 8006b54:	4608      	mov	r0, r1
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	f7fb f8fd 	bl	8001d56 <_isatty>
 8006b5c:	1c43      	adds	r3, r0, #1
 8006b5e:	d102      	bne.n	8006b66 <_isatty_r+0x1a>
 8006b60:	682b      	ldr	r3, [r5, #0]
 8006b62:	b103      	cbz	r3, 8006b66 <_isatty_r+0x1a>
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	bd38      	pop	{r3, r4, r5, pc}
 8006b68:	200003e0 	.word	0x200003e0

08006b6c <round>:
 8006b6c:	ec51 0b10 	vmov	r0, r1, d0
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006b76:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006b7a:	2c13      	cmp	r4, #19
 8006b7c:	ee10 2a10 	vmov	r2, s0
 8006b80:	460b      	mov	r3, r1
 8006b82:	dc19      	bgt.n	8006bb8 <round+0x4c>
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	da09      	bge.n	8006b9c <round+0x30>
 8006b88:	3401      	adds	r4, #1
 8006b8a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006b8e:	d103      	bne.n	8006b98 <round+0x2c>
 8006b90:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b98:	2200      	movs	r2, #0
 8006b9a:	e028      	b.n	8006bee <round+0x82>
 8006b9c:	4d15      	ldr	r5, [pc, #84]	; (8006bf4 <round+0x88>)
 8006b9e:	4125      	asrs	r5, r4
 8006ba0:	ea01 0605 	and.w	r6, r1, r5
 8006ba4:	4332      	orrs	r2, r6
 8006ba6:	d00e      	beq.n	8006bc6 <round+0x5a>
 8006ba8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006bac:	fa42 f404 	asr.w	r4, r2, r4
 8006bb0:	4423      	add	r3, r4
 8006bb2:	ea23 0305 	bic.w	r3, r3, r5
 8006bb6:	e7ef      	b.n	8006b98 <round+0x2c>
 8006bb8:	2c33      	cmp	r4, #51	; 0x33
 8006bba:	dd07      	ble.n	8006bcc <round+0x60>
 8006bbc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8006bc0:	d101      	bne.n	8006bc6 <round+0x5a>
 8006bc2:	f7f9 fb7b 	bl	80002bc <__adddf3>
 8006bc6:	ec41 0b10 	vmov	d0, r0, r1
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8006bd0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006bd4:	40f5      	lsrs	r5, r6
 8006bd6:	4228      	tst	r0, r5
 8006bd8:	d0f5      	beq.n	8006bc6 <round+0x5a>
 8006bda:	2101      	movs	r1, #1
 8006bdc:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8006be0:	fa01 f404 	lsl.w	r4, r1, r4
 8006be4:	1912      	adds	r2, r2, r4
 8006be6:	bf28      	it	cs
 8006be8:	185b      	addcs	r3, r3, r1
 8006bea:	ea22 0205 	bic.w	r2, r2, r5
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	e7e8      	b.n	8006bc6 <round+0x5a>
 8006bf4:	000fffff 	.word	0x000fffff

08006bf8 <_init>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr

08006c04 <_fini>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr
